{"version":3,"sources":["webpack:///../docs/components/number_input.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","type","style","marginLeft","parentName","__position","__code","__scope","Playground","StatusLabel","NumberInput","ColorBox","LargeParagraph","Text","helperText","label","unit","defaultValue","maxWidth","disabled","marginTop","minusStepButtonAriaLabel","plusStepButtonAriaLabel","step","min","max","isMDXComponent"],"mappings":"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","file":"component---docs-components-number-input-mdx-7a711a8ff1895df48a0d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mikanevalainen/Documents/code/helsinki-design-system/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport { StatusLabel, NumberInput } from \"hds-react\";\nimport ColorBox from \"../../src/components/ColorBox\";\nimport LargeParagraph from \"../../src/components/LargeParagraph\";\nimport Text from \"../../src/components/Text\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"number-input\"\n    }}>{`Number input`}</h1>\n    <StatusLabel type=\"alert\" mdxType=\"StatusLabel\">Draft</StatusLabel>\n    <StatusLabel type=\"success\" style={{\n      marginLeft: 'var(--spacing-xs)'\n    }} mdxType=\"StatusLabel\">Accessible</StatusLabel>\n    <LargeParagraph mdxType=\"LargeParagraph\">\n  A number input allows the user to enter numeric values. It also features optional steppers for increasing or decreasing the value by a set amount.\n    </LargeParagraph>\n    <h2 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`A label should always be provided with a number input.`}</strong>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Make sure that the label is clear and concise. The user should immediately understand what number they are supposed to input.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`HDS Number input also supports displaying an unit for the number. Displaying the unit is not mandatory. Only use it when you think it will help the user.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Display the unit for `}<a parentName=\"li\" {...{\n              \"href\": \"https://en.wikipedia.org/wiki/International_System_of_Units\"\n            }}>{`SI units`}</a>{` (such as meters) and currencies.`}</li>\n          <li parentName=\"ul\">{`The unit does not need to be displayed when it is self-evident for the user, such as in \"Number of people\"`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`It is recommended to give the number input a default value. Placeholders should be avoided in number inputs.`}</li>\n      <li parentName=\"ul\">{`HDS Number input supports visual steppers that can be set to increase and decrease the number value by a set amount.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Steppers can be used when changes to the value are small or when they are intuitive to the user (e.g. from 0 to 100 with steps of 10).`}</li>\n          <li parentName=\"ul\">{`You should not use steppers when large value changes are expected.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`HDS number input allows the user to input the date manually without using stepper actions. Whenever you require the user to input numbers, you should also allow manual input.`}</li>\n      <li parentName=\"ul\">{`If steppers are used, provide descriptive aria labels for both increase and decrease actions by using `}<inlineCode parentName=\"li\">{`minusStepButtonAriaLabel`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`plusStepButtonAriaLabel`}</inlineCode>{` props.`}</li>\n      <li parentName=\"ul\">{`If the number needs to follow a specific format, remember to specify it in the assistive text.`}</li>\n      <li parentName=\"ul\">{`Placeholders in number inputs should be avoided. Different screen readers announce placeholders in different ways. It can be very difficult for a screen reader user to differentiate the placeholder from the actual value.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"usage-and-variations\"\n    }}>{`Usage and variations`}</h2>\n    <h3 {...{\n      \"id\": \"default-number-input\"\n    }}>{`Default number input`}</h3>\n    <p>{`Default HDS Number input comes without stepper. The number is always inputted manually. Using this over a text input is still helpful since it has a `}<inlineCode parentName=\"p\">{`type=number`}</inlineCode>{` to aid screen readers and mobile keyboards.`}</p>\n    <p>{`When applicable, a unit can be set for the input by using the `}<inlineCode parentName=\"p\">{`unit`}</inlineCode>{` prop.`}</p>\n    <Playground __position={2} __code={'<NumberInput\\n  helperText=\\\"Assistive text\\\"\\n  label=\\\"Total compensation\\\"\\n  unit=\\\"€\\\"\\n  defaultValue={1000}\\n  style={{ maxWidth: \\'320px\\' }}\\n/>\\n<NumberInput\\n  disabled\\n  helperText=\\\"Assistive text\\\"\\n  label=\\\"Total compensation\\\"\\n  unit=\\\"€\\\"\\n  defaultValue={1000}\\n  style={{ maxWidth: \\'320px\\', marginTop: \\'var(--spacing-s)\\' }}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      StatusLabel,\n      NumberInput,\n      ColorBox,\n      LargeParagraph,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <NumberInput helperText=\"Assistive text\" label=\"Total compensation\" unit=\"€\" defaultValue={1000} style={{\n        maxWidth: '320px'\n      }} mdxType=\"NumberInput\" />\n      <NumberInput disabled helperText=\"Assistive text\" label=\"Total compensation\" unit=\"€\" defaultValue={1000} style={{\n        maxWidth: '320px',\n        marginTop: 'var(--spacing-s)'\n      }} mdxType=\"NumberInput\" />\n    </Playground>\n    <h4 {...{\n      \"id\": \"core-code-example\"\n    }}>{`Core code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"hds-text-input\">\n  <label for=\"input\" class=\"hds-text-input__label\">\n    Total compensation (€)\n    <span class=\"hds-text-input__required\">*</span>\n  </label>\n  <div class=\"hds-text-input__input-wrapper\">\n    <input id=\"input\" value=\"1000\" class=\"hds-text-input__input\" type=\"number\" placeholder=\"Placeholder\" required />\n  </div>\n  <span class=\"hds-text-input__helper-text\">Assistive text</span>\n</div>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"react-code-example\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<NumberInput\n    helperText=\"Assistive text\"\n    label=\"Total compensation\"\n    unit=\"€\"\n    defaultValue={1000}\n/>\n\n<NumberInput\n    disabled\n    helperText=\"Assistive text\"\n    label=\"Total compensation\"\n    unit=\"€\"\n    defaultValue={1000}\n/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"number-input-with-steppers\"\n    }}>{`Number input with steppers`}</h3>\n    <p>{`Steppers can be enabled via providing a `}<inlineCode parentName=\"p\">{`step`}</inlineCode>{` property. Use this variant when value changes are small and you can determine logical amounts for an increase and a decrease step.`}</p>\n    <Playground __position={3} __code={'<NumberInput\\n  helperText=\\\"Assistive text\\\"\\n  label=\\\"Number of attendees\\\"\\n  minusStepButtonAriaLabel=\\\"Decrease by one\\\"\\n  plusStepButtonAriaLabel=\\\"Increase by one\\\"\\n  step={1}\\n  defaultValue={5}\\n  style={{ maxWidth: \\'320px\\' }}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      StatusLabel,\n      NumberInput,\n      ColorBox,\n      LargeParagraph,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <NumberInput helperText=\"Assistive text\" label=\"Number of attendees\" minusStepButtonAriaLabel=\"Decrease by one\" plusStepButtonAriaLabel=\"Increase by one\" step={1} defaultValue={5} style={{\n        maxWidth: '320px'\n      }} mdxType=\"NumberInput\" />\n    </Playground>\n    <h4 {...{\n      \"id\": \"core-code-example-functionality-differs-from-the-react-one\"\n    }}>{`Core code example (functionality differs from the React one):`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"hds-text-input\">\n  <label for=\"input\" class=\"hds-text-input__label\">\n    Total compensation (€)\n    <span class=\"hds-text-input__required\">*</span>\n  </label>\n  <div class=\"hds-text-input__input-wrapper\">\n    <input id=\"input\" value=\"1000\" class=\"hds-text-input__input\" type=\"number\" step=\"1\" placeholder=\"Placeholder\" required />\n  </div>\n  <span class=\"hds-text-input__helper-text\">Assistive text</span>\n</div>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"react-code-example-1\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<NumberInput\n    helperText=\"Assistive text\"\n    label=\"Number of attendees\"\n    minusStepButtonAriaLabel=\"Decrease by one\"\n    plusStepButtonAriaLabel=\"Increase by one\"\n    step={1}\n    defaultValue={5}\n/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"number-input-with-min-and-max-values\"\n    }}>{`Number input with min and max values`}</h3>\n    <p>{`Steppers can be enabled by providing a `}<inlineCode parentName=\"p\">{`step`}</inlineCode>{` property. Use this variant when value changes are small and you can determine logical amounts for an increase and a decrease step.`}</p>\n    <p>{`If your input has special requirements, it is a good practice to describe them in the assistive text.`}</p>\n    <Playground __position={4} __code={'<NumberInput\\n  helperText=\\\"At least 3 attendees are required\\\"\\n  label=\\\"Number of attendees\\\"\\n  min={3}\\n  max={99}\\n  minusStepButtonAriaLabel=\\\"Decrease by one\\\"\\n  plusStepButtonAriaLabel=\\\"Increase by one\\\"\\n  step={1}\\n  defaultValue={3}\\n  style={{ maxWidth: \\'320px\\' }}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      StatusLabel,\n      NumberInput,\n      ColorBox,\n      LargeParagraph,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <NumberInput helperText=\"At least 3 attendees are required\" label=\"Number of attendees\" min={3} max={99} minusStepButtonAriaLabel=\"Decrease by one\" plusStepButtonAriaLabel=\"Increase by one\" step={1} defaultValue={3} style={{\n        maxWidth: '320px'\n      }} mdxType=\"NumberInput\" />\n    </Playground>\n    <h4 {...{\n      \"id\": \"core-code-example-functionality-differs-from-the-react-one-1\"\n    }}>{`Core code example (functionality differs from the React one):`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"hds-text-input\">\n  <label for=\"input\" class=\"hds-text-input__label\">\n    Number of attendees\n    <span class=\"hds-text-input__required\">*</span>\n  </label>\n  <div class=\"hds-text-input__input-wrapper\">\n    <input id=\"input\" value=\"1000\" class=\"hds-text-input__input\" type=\"number\" step=\"1\" min=\"3\" max=\"99\" placeholder=\"Placeholder\" required />\n  </div>\n  <span class=\"hds-text-input__helper-text\">Assistive text</span>\n</div>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"react-code-example-2\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<NumberInput\n    helperText=\"At least 3 attendees are required\"\n    label=\"Number of attendees\"\n    min={3}\n    max={99}\n    minusStepButtonAriaLabel=\"Decrease by one\"\n    plusStepButtonAriaLabel=\"Increase by one\"\n    step={1}\n    defaultValue={3}\n/>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demos--api\"\n    }}>{`Demos & API`}</h2>\n    <h3 {...{\n      \"id\": \"core\"\n    }}>{`Core`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/core/?path=/story/components-number-input--default\"\n      }}>{`Number input in hds-core`}</a></p>\n    <h3 {...{\n      \"id\": \"react\"\n    }}>{`React`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/story/components-numberinput--default\"\n      }}>{`Number input in hds-react`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/docs/components-numberinput--default\"\n      }}>{`NumberInput API`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}