{"version":3,"sources":["webpack:///../docs/components/password_input.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","type","style","marginLeft","parentName","href","external","__position","__code","__scope","Playground","StatusLabel","PasswordInput","Button","IconEye","IconEyeCrossed","ColorBox","LargeParagraph","Link","Text","maxWidth","concealPasswordButtonAriaLabel","helperText","id","includeShowPasswordButton","label","revealPasswordButtonAriaLabel","defaultValue","disabled","marginTop","errorText","invalid","successText","React","revealPassword","setRevealPassword","display","gridTemplateColumns","gap","justifyContent","flexDirection","variant","onClick","iconLeft","aria-hidden","isMDXComponent"],"mappings":"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","file":"component---docs-components-password-input-mdx-2d1169134e42720b12e7.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mikanevalainen/Documents/code/helsinki-design-system/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport { StatusLabel, PasswordInput, Button, IconEye, IconEyeCrossed } from \"hds-react\";\nimport ColorBox from \"../../src/components/ColorBox\";\nimport LargeParagraph from \"../../src/components/LargeParagraph\";\nimport Link from \"../../src/components/Link\";\nimport Text from \"../../src/components/Text\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"password-input\"\n    }}>{`Password input`}</h1>\n    <StatusLabel type=\"alert\" mdxType=\"StatusLabel\">Draft</StatusLabel>\n    <StatusLabel type=\"success\" style={{\n      marginLeft: 'var(--spacing-xs)'\n    }} mdxType=\"StatusLabel\">Accessible</StatusLabel>\n    <LargeParagraph mdxType=\"LargeParagraph\">\n    A password field is a foundational input field component that the user can interact with and specifically input password data.\n    </LargeParagraph>\n    <h2 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`A label should always be provided with password fields.`}</li>\n      <li parentName=\"ul\">{`If possible, validate input in client-side real-time and provide the user with immediate feedback. See `}<a parentName=\"li\" {...{\n          \"href\": \"/patterns/form-validation\"\n        }}>{`HDS Form validation pattern page`}</a>{` for more information and best practices with password fields.`}</li>\n      <li parentName=\"ul\">{`Password fields should always be mandatory. It is recommended to mark it as a required field.`}</li>\n      <li parentName=\"ul\">{`Verify that \"paste\" functionality, browser password helpers, and external password managers are allowed for the input.`}</li>\n      <li parentName=\"ul\">{`HDS password input provides a way to mask/unmask the password. Do not disabled this functionality without a good reason.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`In the case of an insufficient password, aim to provide clear instructions to the user on how to correct the mistake. Always provide a text description of the error.`}</li>\n      <li parentName=\"ul\">{`It is required to use `}<inlineCode parentName=\"li\">{`autocomplete`}</inlineCode>{` attribute if input control is listed in the common input purposes list. You can read the full list of common input purposes at `}<Link href=\"https://www.w3.org/TR/WCAG21/#input-purposes\" external mdxType=\"Link\">{`WCAG 2.1 documentation website`}</Link>{`. You can read more about the requirement from `}<Link href=\"https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose\" external mdxType=\"Link\">{`WCAG 2.1 Identify Input Purpose guideline`}</Link>{`.`}</li>\n      <li parentName=\"ul\">{`Place sign-in in its own `}<inlineCode parentName=\"li\">{`form`}</inlineCode>{` element and use `}<inlineCode parentName=\"li\">{`landmark`}</inlineCode>{` region to mark the login area. This allows assistive technologies to quickly locate and skip to the login section.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"security\"\n    }}>{`Security`}</h2>\n    <p>{`As HDS password input provides only the front-end solution, remember that you need to take care of the security in your project.\nHere are some good practices you need to consider.`}</p>\n    <h3 {...{\n      \"id\": \"general-security\"\n    }}>{`General Security`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Do not prevent the user from copying and pasting the password into the field.`}</li>\n      <li parentName=\"ul\">{`Prefer using ready authentication libraries and services, and familiarize yourself properly with their implementation.`}</li>\n      <li parentName=\"ul\">{`In City of Helsinki Services, always use Helsinki Profiili authentication if possible.`}</li>\n      <li parentName=\"ul\">{`Never store the password in a readable form. Always use proper hash algorithms.`}</li>\n      <li parentName=\"ul\">{`Always protect the communication with secure connections (TLS 1.2 or newer).`}</li>\n      <li parentName=\"ul\">{`Encourage usage of multi-factor authentication and password managers.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"creating-a-new-password\"\n    }}>{`Creating a new password`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Inform user properly what the requirements for their password are.`}</li>\n      <li parentName=\"ul\">{`Do not accept password matching user identifier, e.g. a username or an email.`}</li>\n      <li parentName=\"ul\">{`Do not truncate, sanitize, or format in any way the password user has given.`}</li>\n      <li parentName=\"ul\">{`Set minimum length for password 12 to 16 characters.`}</li>\n      <li parentName=\"ul\">{`Avoid setting a maximum password length smaller than 128 characters.`}</li>\n      <li parentName=\"ul\">{`If possible, allow the password input to reflect the strength of the password entered when the password component is used for creating anew password.`}</li>\n      <li parentName=\"ul\">{`If possible, add other programmatic assistance. Detect and suggest changes to provide the user with assistance in generating strong passwords.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"using-password-to-log-in\"\n    }}>{`Using password to log in`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`In an error message, you should not declare whether the username or the password is wrong but give general instructions to fix the problem.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"usage-and-variations\"\n    }}>{`Usage and variations`}</h2>\n    <h3 {...{\n      \"id\": \"default-password-input\"\n    }}>{`Default password input`}</h3>\n    <p>{`A default HDS password input includes an icon to mask and unmask the password.`}</p>\n    <Playground __position={2} __code={'<div\\n  style={{\\n    maxWidth: \\'400px\\',\\n  }}\\n>\\n  <PasswordInput\\n    concealPasswordButtonAriaLabel=\\\"Hide password\\\"\\n    helperText=\\\"Assistive text\\\"\\n    id=\\\"Default\\\"\\n    includeShowPasswordButton\\n    label=\\\"Label\\\"\\n    revealPasswordButtonAriaLabel=\\\"Show password\\\"\\n  />\\n  <PasswordInput\\n    concealPasswordButtonAriaLabel=\\\"Hide password\\\"\\n    defaultValue=\\\"0451234567\\\"\\n    disabled\\n    helperText=\\\"Assistive text\\\"\\n    id=\\\"Disabled\\\"\\n    includeShowPasswordButton\\n    label=\\\"Label for disabled\\\"\\n    revealPasswordButtonAriaLabel=\\\"Show password\\\"\\n    style={{ marginTop: \\'var(--spacing-s)\\' }}\\n  />\\n\\n  <PasswordInput\\n    concealPasswordButtonAriaLabel=\\\"Hide password\\\"\\n    errorText=\\\"Error text\\\"\\n    helperText=\\\"Assistive text\\\"\\n    id=\\\"Error\\\"\\n    includeShowPasswordButton\\n    invalid\\n    label=\\\"Label for invalid input\\\"\\n    revealPasswordButtonAriaLabel=\\\"Show password\\\"\\n    style={{ marginTop: \\'var(--spacing-s)\\' }}\\n  />\\n\\n  <PasswordInput\\n    concealPasswordButtonAriaLabel=\\\"Hide password\\\"\\n    helperText=\\\"Assistive text\\\"\\n    id=\\\"Success\\\"\\n    includeShowPasswordButton\\n    label=\\\"Label for success input\\\"\\n    revealPasswordButtonAriaLabel=\\\"Show password\\\"\\n    successText=\\\"Success text\\\"\\n    style={{ marginTop: \\'var(--spacing-s)\\' }}\\n  />\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      StatusLabel,\n      PasswordInput,\n      Button,\n      IconEye,\n      IconEyeCrossed,\n      ColorBox,\n      LargeParagraph,\n      Link,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      <div style={{\n        maxWidth: '400px'\n      }}>\n    <PasswordInput concealPasswordButtonAriaLabel=\"Hide password\" helperText=\"Assistive text\" id=\"Default\" includeShowPasswordButton label=\"Label\" revealPasswordButtonAriaLabel=\"Show password\" mdxType=\"PasswordInput\" />\n        <PasswordInput concealPasswordButtonAriaLabel=\"Hide password\" defaultValue=\"0451234567\" disabled helperText=\"Assistive text\" id=\"Disabled\" includeShowPasswordButton label=\"Label for disabled\" revealPasswordButtonAriaLabel=\"Show password\" style={{\n          marginTop: 'var(--spacing-s)'\n        }} mdxType=\"PasswordInput\" />\n\n        <PasswordInput concealPasswordButtonAriaLabel=\"Hide password\" errorText=\"Error text\" helperText=\"Assistive text\" id=\"Error\" includeShowPasswordButton invalid label=\"Label for invalid input\" revealPasswordButtonAriaLabel=\"Show password\" style={{\n          marginTop: 'var(--spacing-s)'\n        }} mdxType=\"PasswordInput\" />\n\n        <PasswordInput concealPasswordButtonAriaLabel=\"Hide password\" helperText=\"Assistive text\" id=\"Success\" includeShowPasswordButton label=\"Label for success input\" revealPasswordButtonAriaLabel=\"Show password\" successText=\"Success text\" style={{\n          marginTop: 'var(--spacing-s)'\n        }} mdxType=\"PasswordInput\" />\n      </div>\n    </Playground>\n    <h4 {...{\n      \"id\": \"core-code-example\"\n    }}>{`Core code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`   <div class=\"hds-text-input\">\n       <label for=\"input\" class=\"hds-text-input__label\">\n         Label text\n         <span class=\"hds-text-input__required\">*</span>\n       </label>\n     <div class=\"hds-text-input__input-wrapper\">\n       <input\n         id=\"input1\"\n         class=\"hds-text-input__input\"\n         type=\"password\"\n       />\n       <div class=\"hds-text-input__buttons\">\n         <button\n           type=\"button\"\n           aria-label=\"Show\"\n           class=\"hds-text-input__button\"\n         >\n           <i class=\"hds-icon hds-icon--eye hds-icon--size-s\" aria-hidden=\"true\"></i>\n       </div>\n     </div>\n     <span class=\"hds-text-input__helper-text\">Assistive text</span>\n    </div>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"react-code-example\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<PasswordInput\n    concealPasswordButtonAriaLabel=\"Hide password\"\n    helperText=\"Assistive text\"\n    id=\"Default\"\n    includeShowPasswordButton\n    label=\"Label\"\n    revealPasswordButtonAriaLabel=\"Show password\"\n/>\n\n<PasswordInput\n    concealPasswordButtonAriaLabel=\"Hide password\"\n    defaultValue=\"0451234567\"\n    disabled\n    helperText=\"Assistive text\"\n    id=\"Disabled\"\n    includeShowPasswordButton\n    label=\"Label for disabled\"\n    revealPasswordButtonAriaLabel=\"Show password\"\n/>\n\n<PasswordInput\n    concealPasswordButtonAriaLabel=\"Hide password\"\n    errorText=\"Error text\"\n    helperText=\"Assistive text\"\n    id=\"Error\"\n    includeShowPasswordButton\n    invalid\n    label=\"Label for invalid input\"\n    revealPasswordButtonAriaLabel=\"Show password\"\n/>\n\n<PasswordInput\n    concealPasswordButtonAriaLabel=\"Hide password\"\n    helperText=\"Assistive text\"\n    id=\"Success\"\n    includeShowPasswordButton\n    label=\"Label for success input\"\n    revealPasswordButtonAriaLabel=\"Show password\"\n    successText=\"Success text\"\n/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"password-input-with-an-external-button\"\n    }}>{`Password input with an external button`}</h3>\n    <p>{`If necessary, the mask/unmask icon can be removed and the feature controlled with an external button element.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [revealPassword, setRevealPassword] = React.useState(false)\\n  return (\\n    <div\\n      style={{\\n        display: \\'grid\\',\\n        gridTemplateColumns: \\'400px 200px\\',\\n        gap: \\'20px\\',\\n      }}\\n    >\\n      <PasswordInput\\n        label=\\\"Label for external show password button\\\"\\n        id=\\\"external-password-button\\\"\\n        includeShowPasswordButton={false}\\n        helperText=\\\"Assistive text\\\"\\n        type={revealPassword ? \\'text\\' : \\'password\\'}\\n        style={{ maxWidth: \\'400px\\' }}\\n      />\\n      <div\\n        style={{\\n          display: \\'flex\\',\\n          justifyContent: \\'center\\',\\n          flexDirection: \\'column\\',\\n        }}\\n      >\\n        <Button\\n          variant=\\\"supplementary\\\"\\n          onClick={() => setRevealPassword(!revealPassword)}\\n          iconLeft={\\n            revealPassword ? (\\n              <IconEyeCrossed aria-hidden />\\n            ) : (\\n              <IconEye aria-hidden />\\n            )\\n          }\\n        >\\n          {revealPassword ? \\'Hide password\\' : \\'Show password\\'}\\n        </Button>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      StatusLabel,\n      PasswordInput,\n      Button,\n      IconEye,\n      IconEyeCrossed,\n      ColorBox,\n      LargeParagraph,\n      Link,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [revealPassword, setRevealPassword] = React.useState(false);\n        return <div style={{\n          display: \"grid\",\n          gridTemplateColumns: \"400px 200px\",\n          gap: \"20px\"\n        }}>\n      <PasswordInput label=\"Label for external show password button\" id=\"external-password-button\" includeShowPasswordButton={false} helperText=\"Assistive text\" type={revealPassword ? 'text' : 'password'} style={{\n            maxWidth: '400px'\n          }} mdxType=\"PasswordInput\" />\n      <div style={{\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column'\n          }}>\n        <Button variant=\"supplementary\" onClick={() => setRevealPassword(!revealPassword)} iconLeft={revealPassword ? <IconEyeCrossed aria-hidden mdxType=\"IconEyeCrossed\" /> : <IconEye aria-hidden mdxType=\"IconEye\" />} mdxType=\"Button\">\n          {revealPassword ? 'Hide password' : 'Show password'}\n        </Button>\n      </div>\n    </div>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"react-code-example-1\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`{() => {\n  const [revealPassword, setRevealPassword] = React.useState(false);\n  return (\n    <div style={{ display: \"grid\", gridTemplateColumns: \"400px 200px\", gap: \"20px\" }}>\n      <PasswordInput\n        label=\"Label for external show password button\"\n        id=\"external-password-button\"\n        includeShowPasswordButton={false}\n        helperText=\"Assistive text\"\n        type={revealPassword ? 'text' : 'password'}\n        style={{maxWidth: '400px'}}\n      />\n      <div style={{ display: 'flex', justifyContent: 'center', flexDirection: 'column' }}>\n        <Button\n          variant=\"supplementary\"\n          onClick={() => setRevealPassword(!revealPassword)}\n          iconLeft={revealPassword ? <IconEyeCrossed aria-hidden /> : <IconEye aria-hidden />}\n        >\n          {revealPassword ? 'Hide password' : 'Show password'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demos--api\"\n    }}>{`Demos & API`}</h2>\n    <h3 {...{\n      \"id\": \"core\"\n    }}>{`Core`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/core/?path=/story/components-password-input--default\"\n      }}>{`Password input in hds-core`}</a></p>\n    <h3 {...{\n      \"id\": \"react\"\n    }}>{`React`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/story/components-password-input--default\"\n      }}>{`Password input in hds-react`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/docs/components-password-input--default\"\n      }}>{`PasswordInput API`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}