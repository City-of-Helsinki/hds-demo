{"version":3,"sources":["webpack:///../docs/patterns/form_validation.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","IconCheck","IconError","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","type","parentName","label","className","src","alt","style","viewable","marginRight","verticalAlign","size","isMDXComponent"],"mappings":"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","file":"component---docs-patterns-form-validation-mdx-29e5598f1961ea6ce8d1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mikanevalainen/Documents/code/helsinki-design-system/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { StatusLabel, Notification } from \"hds-react\";\nimport LargeParagraph from \"../../src/components/LargeParagraph\";\nimport Link from \"../../src/components/Link\";\nimport Text from \"../../src/components/Text\";\nimport Image from \"../../src/components/Image\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst IconCheck = makeShortcode(\"IconCheck\");\nconst IconError = makeShortcode(\"IconError\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"form-validation\"\n    }}>{`Form validation`}</h1>\n    <StatusLabel type=\"info\" mdxType=\"StatusLabel\">Stable</StatusLabel>\n    <LargeParagraph mdxType=\"LargeParagraph\">\n  Forms are very common in the City of Helsinki services. Users making errors in forms is just as common. HDS Form validation pattern aims to clearly indicate erroneous inputs to users and make it as effortless as possible to fix them.\n    </LargeParagraph>\n    <h2 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`HDS pattern is based on the following basic principles`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`It must be easy for the user to locate the erroneous input field`}</li>\n          <li parentName=\"ul\">{`The error message is clearly visible and is easy to understand`}</li>\n          <li parentName=\"ul\">{`The error message stays on the screen as long as the error has been fixed`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`All following methods follow these principles even though their implementation may differ from each other.`}</p>\n    <Notification label=\"Frontend vs backend validation\" className=\"siteNotification\" mdxType=\"Notification\">\n  HDS form validation pattern only concerns validation that happens in the frontend. You must never trust the frontend validation alone. Make the validation process in the backend too.\n    </Notification>\n    <h2 {...{\n      \"id\": \"types-of-validation\"\n    }}>{`Types of validation`}</h2>\n    <p>{`This page will provide basic principles for all as well as links to Storybook examples on how to use each validation method in practice. HDS pattern proposes three (3) form validation methods:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Method`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`What does it mean?`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`When to use it?`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#dynamic-validation\"\n            }}>{`Dynamic`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`Recommended option.`}</strong>{` Validation performed individually for each form control, when the user has entered a value and/or moves the focus to the next interactive element`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Preferred method when client-side scripting (e.g. JavaScript) is available`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#static-validation\"\n            }}>{`Static`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Validation performed for the whole form at once, when the user submits the form or proceeds to the next step`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use when client-side scripting is not possible`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#hybrid-validation\"\n            }}>{`Hybrid`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Dynamic and static methods utilised in parallel, benefitting from each other`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use when some of the validation has to be done when the form is submitted but client-side scripting is still possible`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <Notification label=\"Why are different validation methods allowed?\" className=\"siteNotification\" mdxType=\"Notification\">\n  There is a wide range of services in the City of Helsinki. Some projects are restricted to static validation due to technical limitations (e.g. no JavaScript). For these reasons HDS offers multiple validation methods and has examples available for all kinds of projects.\n    </Notification>\n    <h3 {...{\n      \"id\": \"dynamic-validation\"\n    }}>{`Dynamic validation`}</h3>\n    <p><strong parentName=\"p\">{`This is the recommended validation method in the City of Helsinki services.`}</strong></p>\n    <p>{`In dynamic form validation the user input is `}<strong parentName=\"p\">{`validated immediately after the focus leaves the current form element`}</strong>{` and moves to the next one. If an error is found during the validation, the form control is set to an error state.`}</p>\n    <p><strong parentName=\"p\">{`Dynamic form validation is recommended way to do input validation in the City of Helsinki services`}</strong>{`. The method allows the user to fix the error immediately rather than after the form has been submitted. This can greatly reduce cognitive load of the user since they neither do have to locate the erroneous input nor switch their context to the next input before fixing the error.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/iframe.html?id=patterns-form-validation--dynamic&viewMode=story\"\n      }}>{`See interactive dynamic form validation example in HDS Storybook`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/docs/patterns-form-validation--static#dynamic\"\n      }}>{`See dynamic form validation code example in HDS Storybook`}</a></p>\n    <h3 {...{\n      \"id\": \"static-validation\"\n    }}>{`Static validation`}</h3>\n    <p>{`In static form validation the validation is done when the form is submitted or the next page is loaded. In this case the validation can be done either in the browser and/or in the service backend. This method is common for services which cannot use JavaScript for dynamic approach.`}</p>\n    <p>{`The general issue of static validation is that it is possible that there are multiple erroneous inputs after the validation. To make it easier for the user to go through the errors, `}<strong parentName=\"p\">{`HDS recommends using validation summary pattern`}</strong>{` in which all errors are gathered to one list on top of the form. The list contains all errors found the the form and an anchor link to each form control. You can read more about the `}<a parentName=\"p\" {...{\n        \"href\": \"#validation-summary-pattern\"\n      }}>{`validation summary pattern in its own section`}</a>{`.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/iframe.html?id=patterns-form-validation--static&viewMode=story\"\n      }}>{`See interactive static form validation example in HDS Storybook`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/docs/patterns-form-validation--static#static\"\n      }}>{`See static form validation code example in HDS Storybook`}</a></p>\n    <h3 {...{\n      \"id\": \"hybrid-validation\"\n    }}>{`Hybrid validation`}</h3>\n    <p>{`Dynamic and static validation methods can be also used in parallel. This is particularly useful if part of the validation has to be done in the backend (e.g. checking if a user already exists). In this case, basic input validation can be done dynamically and other validations when the form is submitted. As in static validation, `}<strong parentName=\"p\">{`HDS recommends using validation summary pattern`}</strong>{` for errors that are found on form submit. You can read more about the `}<a parentName=\"p\" {...{\n        \"href\": \"#validation-summary-pattern\"\n      }}>{`validation summary pattern in its own section`}</a>{`.`}</p>\n    <p>{`The advantage of hybrid validation is that because form controls are validated dynamically, the user generally receives less errors after the form submit. `}<strong parentName=\"p\">{`It is always recommended to use dynamic validation approach first`}</strong>{` but if some static validation is required, the hybrid validation approach can be used.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/iframe.html?id=patterns-form-validation--hybrid&viewMode=story\"\n      }}>{`See interactive hybrid form validation example in HDS Storybook`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/docs/patterns-form-validation--static#hybrid\"\n      }}>{`See hybrid form validation code example in HDS Storybook`}</a></p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"presenting-validation-results\"\n    }}>{`Presenting validation results`}</h2>\n    <h3 {...{\n      \"id\": \"form-control-errorsuccess-messages\"\n    }}>{`Form control error/success messages`}</h3>\n    <p>{`When a form control has been gone through either dynamic or static validation, the state of the component should change indicating the inputed value has been validated.`}</p>\n    <p>{`Depending on the result of the validation, message is displayed below the form field if the value is valid or invalid.`}</p>\n    <h4 {...{\n      \"id\": \"1-error-message\"\n    }}>{`1. Error message`}</h4>\n    <p>{`Error message indicates that a required field is left empty or the inputted value is in wrong format. `}<strong parentName=\"p\">{`The error message must be displayed if the value did not pass validation`}</strong>{`. The error message is visible until the error is fixed.`}</p>\n    <p>{`If the form control has an assistive text, it is displayed below the validation message. `}<strong parentName=\"p\">{`The assistive text should be never hidden when the error description is active.`}</strong>{` The user may need the information provided by the assistive text when correcting the error.`}</p>\n    <Image src=\"../../static/patterns/form-validation/form-states-error@2x.png\" alt=\"Form control error state\" style={{\n      \"maxWidth\": \"376px\"\n    }} viewable mdxType=\"Image\" />\n    <div className=\"guideline-do\" style={{\n      \"background\": \"var(--color-success-light)\",\n      \"padding\": \"var(--spacing-s)\",\n      \"marginBottom\": \"var(--spacing-layout-2-xs)\",\n      \"maxWidth\": \"600px\"\n    }}>\n    <div className=\"guideline-do-label\" style={{\n        \"color\": \"var(--color-success)\",\n        \"marginBottom\": \"var(--spacing-s)\"\n      }}><IconCheck style={{\n          marginRight: 'var(--spacing-3-xs)',\n          verticalAlign: 'middle'\n        }} size=\"s\" mdxType=\"IconCheck\" /><strong>Do</strong></div>\n    <ul style={{\n        \"marginBottom\": \"0\"\n      }}>\n        <li><strong>Keep it short</strong>\n            <ul>\n                <li>Error text <em>should</em> not run longer than the form control and more than two rows.</li>\n            </ul>\n        </li>\n        <li><strong>Be clear, specific and easy to understand</strong>\n          <ul>\n                <li><strong>An error text must clearly state</strong>\n                    <ul>\n                      <li>precise descriptions of exact problems</li>\n                      <li>a specific solution or constructive advice on how to fix the problem.</li>\n                    </ul>\n                </li>\n                <li>For example “Please select a language” or “Email address needs to have an @ sign”</li>\n          </ul>\n        </li>\n        <li><strong>Be friendly</strong>\n            <ul>\n                <li>Avoid negative expressions or blaming the user (for example “You did not enter your first name”)</li>\n                <li>Instead use positive words and a provide a correct solution (for example “Please enter your first name”)</li>\n            </ul>\n        </li>\n    </ul>\n    </div>\n    <div className=\"guideline-dont\" style={{\n      \"background\": \"var(--color-error-light)\",\n      \"padding\": \"var(--spacing-s)\",\n      \"marginBottom\": \"var(--spacing-layout-2-xs)\",\n      \"maxWidth\": \"600px\"\n    }}>\n    <div className=\"guideline-dont-label\" style={{\n        \"color\": \"var(--color-error)\",\n        \"marginBottom\": \"var(--spacing-s)\"\n      }}><IconError style={{\n          marginRight: 'var(--spacing-3-xs)',\n          verticalAlign: 'middle'\n        }} size=\"s\" mdxType=\"IconError\" /><strong>Don't</strong></div>\n    <ul style={{\n        \"marginBottom\": \"0\"\n      }}>\n        <li><strong>Use vague statements</strong> (for example “There has been an error”).</li>\n        <li><strong>Use technical terms or developer jargon</strong> (for example “Syntax error”). Use terms lay people can understand.</li>\n        <li><strong>Output raw system errors</strong> (for example “Error 123-xyz”).</li>\n    </ul>\n    </div>\n    <h5 {...{\n      \"id\": \"fixing-errors\"\n    }}>{`Fixing errors`}</h5>\n    <p>{`When the input is in the error state, the user will eventually try to correct the error. The way how the input reacts to this depends on the validation method in use.`}</p>\n    <p><strong parentName=\"p\">{`In dynamic and hybrid validation`}</strong>{`, checking if the error has been fixed should be done after each character change. For example, if the user has forgotten to input @ sign for an email input, the error disappears immediately when the @ sign is added.`}</p>\n    <p><strong parentName=\"p\">{`In static validation`}</strong>{`, checking if the error has been fixed dynamically is not possible. The only way to check if the errors have been fixed is to submit the form again.`}</p>\n    <h4 {...{\n      \"id\": \"2-success-message\"\n    }}>{`2. Success message`}</h4>\n    <p>{`Success message indicates that an inputted value has passed form validation. Success messages are optional and `}<strong parentName=\"p\">{`they should only be used when the user must know if the input passed the validation`}</strong>{`. This is often the case for the following cases:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The input format is very complex such as requiring a specific amount of characters or certain special characters (e.g. a social security number)`}</li>\n      <li parentName=\"ul\">{`When it is critical for the process that the user inputs the information correctly`}</li>\n      <li parentName=\"ul\">{`When the user is not easily able to determine if the input is valid or not (e.g. new password inputs, inputs validated dynamically from the backend)`}</li>\n    </ul>\n    <Image src=\"../../static/patterns/form-validation/form-validation-message-success@2x.png\" alt=\"Form control success state\" style={{\n      \"maxWidth\": \"376px\"\n    }} viewable mdxType=\"Image\" />\n    <p>{`It is better to avoid using success validation if there is not a clear need for it. Using redundant success messages creates unnecessary visual noise to the view.`}</p>\n    <h3 {...{\n      \"id\": \"validation-summary-pattern\"\n    }}>{`Validation summary pattern`}</h3>\n    <p><strong parentName=\"p\">{`When using static or hybrid validation methods, HDS recommends using a validation summary to clearly list errors found during the form submit`}</strong>{`. Validation summary pattern uses an error summary component which is provided by HDS. The error summary is notification-like element which lists all errors (and their descriptions) found in the form and provides anchor links to each erroneus input for easy access. `}</p>\n    <p>{`You can learn more about the error summary component in `}<a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/story/components-errorsummary--default\"\n      }}>{`HDS React Storybook`}</a>{`.`}</p>\n    <Image src=\"../../static/patterns/form-validation/error-summary@2x.png\" alt=\"Error summary component\" style={{\n      \"maxWidth\": \"482px\"\n    }} viewable mdxType=\"Image\" />\n    <p>{`The usage of the error summary component is triggered when the form is submitted:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`If errors are found in the form, the error summary component is created and placed at the beginning of the form, below the initial form heading.`}</li>\n      <li parentName=\"ol\">{`The focus is moved from the form submit button to the error summary heading.`}</li>\n      <li parentName=\"ol\">{`The error summary is populated with a list of errors found in the form. Errors are in the same order as they appear in the form. For each error, a running number and an error description are provided. The error description also acts as an anchor link.`}</li>\n      <li parentName=\"ol\">{`The user can use the error description anchor link to quickly jump and focus each of the erroneous inputs.`}</li>\n      <li parentName=\"ol\">{`When the user submits the form again and errors are still found, the contents of the error summary are updated and the focus is moved back to the summary heading again.`}</li>\n    </ol>\n    <Image src=\"../../static/patterns/form-validation/validation-pattern-example@2x.png\" alt=\"Validation summary example\" style={{\n      \"maxWidth\": \"432px\"\n    }} viewable mdxType=\"Image\" />\n    <p>{`You can see the validation summary pattern in action in HDS Storybook `}<a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/iframe.html?id=patterns-form-validation--static&viewMode=story\"\n      }}>{`static validation example`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/iframe.html?id=patterns-form-validation--hybrid&viewMode=story\"\n      }}>{`hybrid validation example`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"validation-of-multiple-input-fields\"\n    }}>{`Validation of multiple input fields`}</h3>\n    <p>{`In some cases, multiple input fields can be related to each other in a way that a change in one of them may cause errors in the other inputs. In this situation, one specific error may relate to multiple inputs at the same time.`}</p>\n    <p>{`An example of this could be having two date inputs for setting a start and an end time. If the end time is set to be earlier than the start time, both date inputs become erroneous. Since assistive technologies only see one input at a time, all related inputs should be set to an error state and given an appropriate error message. The error message can be the same for all inputs or more input specific if the situation allows so. All error messages are also added to the error summary list. This method has been illustrated in the image below.`}</p>\n    <Image src=\"../../static/patterns/form-validation/multiple-fields-validation@2x.png\" alt=\"Showing error messages of multiple input fields\" style={{\n      \"maxWidth\": \"482px\"\n    }} viewable mdxType=\"Image\" />\n    <p>{`When there are multiple related fields, a later field in the form can make an earlier field erroneous. In this case, it is important to note that the state change of the earlier field can go unnoticed for assistive technologies. It is recommended to notify assistive technologies of other inputs' state change by using the `}<a parentName=\"p\" {...{\n        \"href\": \"/components/notification#invisible\"\n      }}>{`HDS invisible notification`}</a>{`.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/\"\n      }}>{`See interactive example of validating multiple related input fields in HDS Storybook`}</a></p>\n    <h3 {...{\n      \"id\": \"validation-in-multi-page-forms\"\n    }}>{`Validation in multi-page forms`}</h3>\n    <p><StatusLabel type=\"error\" style={{\n        marginRight: 'var(--spacing-3-xs)'\n      }} mdxType=\"StatusLabel\">Coming soon</StatusLabel> <strong>The navigation component for multi-page forms has not yet been designed or implemented in HDS.</strong></p>\n    <p>{`HDS Form pattern suggests dividing longer forms into separate steps. You can read more about this in the `}<a parentName=\"p\" {...{\n        \"href\": \"/patterns/forms#4-dividing-long-forms-into-separate-steps\"\n      }}>{`HDS Form pattern documentation`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Validation is strongly recommended to be done separately for each page of the form.`}</strong>{` This means that the user should not be able to proceed to the next form step before all the input fields have been validated on the current step. If some selection can make a selection in a previous step invalid, this should be clearly indicated to the user.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}