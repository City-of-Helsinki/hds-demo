{"version":3,"file":"component---src-docs-components-dialog-customisation-mdx-242842a2270c9df24e18.js","mappings":"6PAQaA,EAAe,CAC1B,KAAQ,mCACR,MAAS,0BAELC,EAAc,CAClBD,aAAAA,GAEIE,EAAY,SAAH,OACbC,EAAQ,EAARA,SACAC,EAAW,EAAXA,YAAW,OACP,QAAC,UAAU,CAACA,YAAaA,GAAcD,EAAsB,EACpD,SAASE,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,QAACL,EAAS,iBAAKD,EAAiBM,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,cACE,GAAM,gBACN,MAAS,CACP,SAAY,aACb,iBACiB,aAAGC,WAAW,KAC9B,KAAQ,iBACR,aAAc,0BACd,UAAa,wBACZ,gBAAMA,WAAW,IAChB,UAAa,4DACb,cAAe,OACf,MAAS,CACP,cAAiB,eAGzB,cACE,GAAM,2BACN,MAAS,CACP,SAAY,aACb,4BAC4B,aAAGA,WAAW,KACzC,KAAQ,4BACR,aAAc,qCACd,UAAa,wBACZ,gBAAMA,WAAW,IAChB,UAAa,4DACb,cAAe,OACf,MAAS,CACP,cAAiB,eAGzB,qCAAuB,sBAAYA,WAAW,KAAG,SAAuB,gGACxE,sBACE,iBAAOA,WAAW,UAChB,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,MAAI,mBAEf,cAAIA,WAAW,KACb,MAAS,MAAI,kBAInB,iBAAOA,WAAW,UAChB,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAI,yBAC9B,cAAIA,WAAW,KACb,MAAS,MAAI,qCAGjB,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAI,qBAC9B,cAAIA,WAAW,KACb,MAAS,MAAI,mCAKrB,cACE,GAAM,wBACN,MAAS,CACP,SAAY,aACb,yBACyB,aAAGA,WAAW,KACtC,KAAQ,yBACR,aAAc,kCACd,UAAa,wBACZ,gBAAMA,WAAW,IAChB,UAAa,4DACb,cAAe,OACf,MAAS,CACP,cAAiB,eAGzB,QAAC,KAAU,CAACD,QAAQ,eAClB,oBAAK,gBAAMC,WAAW,MAClB,UAAa,gBAAc,irDAiDrC,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://site/./src/docs/components/dialog/customisation.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Button, IconInfoCircle } from 'hds-react';\nimport Playground from '../../../components/Playground';\nimport TabsLayout from './tabs.mdx';\nexport const _frontmatter = {\n  \"slug\": \"/components/dialog/customisation\",\n  \"title\": \"Dialog - Customisation\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = ({\n  children,\n  pageContext\n}) => <TabsLayout pageContext={pageContext}>{children}</TabsLayout>;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"customisation\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Customisation`}<a parentName=\"h2\" {...{\n        \"href\": \"#customisation\",\n        \"aria-label\": \"customisation permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h2>\n    <h3 {...{\n      \"id\": \"customisation-properties\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Customisation properties`}<a parentName=\"h3\" {...{\n        \"href\": \"#customisation-properties\",\n        \"aria-label\": \"customisation properties permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` property to customise the component. See all available theme variables in the table below.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Theme variable`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--accent-line-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Color of the dialog accent line`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--overlay-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Color of the dialog overlay`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"customisation-example\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Customisation example`}<a parentName=\"h3\" {...{\n        \"href\": \"#customisation-example\",\n        \"aria-label\": \"customisation example permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <Playground mdxType=\"Playground\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\"\n        }}>{`{() => {\n  const dialogTargetRef = React.useRef(null); // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openInfoDialogButtonRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const close = () => setIsOpen(false);\n  const titleId = 'info-dialog-title';\n  const descriptionId = 'info-dialog-content';\n  return (\n    <>\n      <div ref={dialogTargetRef} />\n      <Button ref={openInfoDialogButtonRef} onClick={() => setIsOpen(true)}>\n        Open Info dialog\n      </Button>\n      <Dialog\n        id=\"info-dialog\"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n        isOpen={isOpen}\n        close={close}\n        closeButtonLabelText=\"Close info dialog\"\n        focusAfterCloseRef={openInfoDialogButtonRef}\n        targetElement={dialogTargetRef.current}\n        theme={{\n          '--accent-line-color': 'var(--color-tram)',\n          '--overlay-color': 'rgba(0, 0, 0, 0.7)'\n        }}\n      >\n        <Dialog.Header\n          id={titleId}\n          title=\"Terms of service have changed\"\n          iconLeft={<IconInfoCircle aria-hidden=\"true\" />}\n        />\n        <Dialog.Content>\n          <p id={descriptionId} className=\"text-body\">\n            Please note that the terms of this service have changed. You can review the changes in the user settings.\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close}>Close</Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>\n  );\n}}\n`}</code></pre>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","children","pageContext","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}