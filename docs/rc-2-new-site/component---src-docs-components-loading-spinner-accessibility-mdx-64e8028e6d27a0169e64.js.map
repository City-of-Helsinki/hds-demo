{"version":3,"file":"component---src-docs-components-loading-spinner-accessibility-mdx-64e8028e6d27a0169e64.js","mappings":"oLAasBA,E,6DALTC,EAAe,CAC1B,KAAQ,4CACR,MAAS,kCAQLC,GALgBF,EAKK,OALG,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,cAASG,KAIZG,EAAc,CAClBL,aAAAA,GAGIM,EAAY,SAAC,GAAD,IAChBC,EADgB,EAChBA,SACAC,EAFgB,EAEhBA,YAFgB,OAGZ,QAAC,UAAD,CAAYA,YAAaA,GAAcD,IAE9B,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGR,GACF,YACD,OAAO,QAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCQ,WAAYA,EAAYC,QAAQ,eAG5E,cACE,GAAM,gBACN,MAAS,CACP,SAAY,aAHhB,iBAKoB,aAAGC,WAAW,KAC9B,KAAQ,iBACR,aAAc,0BACd,UAAa,wBACZ,aAAGA,WAAW,IACb,UAAa,4DACb,cAAe,OACf,MAAS,CACP,cAAiB,eAGzB,cACE,GAAM,mBACN,MAAS,CACP,SAAY,aAHhB,oBAKuB,aAAGA,WAAW,KACjC,KAAQ,oBACR,aAAc,6BACd,UAAa,wBACZ,aAAGA,WAAW,IACb,UAAa,4DACb,cAAe,OACf,MAAS,CACP,cAAiB,eAGzB,mBACE,cAAIA,WAAW,MAAf,wFAA4G,QAACX,EAAD,CAAMY,KAAK,iDAAiDC,UAAQ,EAACH,QAAQ,QAA7E,4BAA5G,4EAA+S,aAAGC,WAAW,KACzT,KAAQ,yBADmS,qCAA/S,MAGA,cAAIA,WAAW,MAAf,6FAAiH,kBAAQA,WAAW,MAAnB,sGAAjH,uRACA,cAAIA,WAAW,MAAf,gFAAoG,sBAAYA,WAAW,MAAvB,eAApG,0CAAsM,sBAAYA,WAAW,MAAvB,uBAAtM,gDACE,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,0FAA8G,cAAIA,WAAW,MAAf,+BAA9G,WAAiL,cAAIA,WAAW,MAAf,yCAAjL,OACA,cAAIA,WAAW,MAAf,gKACA,cAAIA,WAAW,MAAf,mIAQVH,EAAWM,gBAAiB","sources":["webpack://site/./src/docs/components/loading-spinner/accessibility.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport TabsLayout from './tabs.mdx';\nexport const _frontmatter = {\n  \"slug\": \"/components/loading-spinner/accessibility\",\n  \"title\": \"LoadingSpinner - Accessibility\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children,\n  pageContext\n}) => <TabsLayout pageContext={pageContext}>{children}</TabsLayout>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"accessibility\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Accessibility`}<a parentName=\"h2\" {...{\n        \"href\": \"#accessibility\",\n        \"aria-label\": \"accessibility permalink\",\n        \"className\": \"header-anchor after\"\n      }}><i parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></i></a></h2>\n    <h3 {...{\n      \"id\": \"pay-attention-to\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Pay attention to`}<a parentName=\"h3\" {...{\n        \"href\": \"#pay-attention-to\",\n        \"aria-label\": \"pay attention to permalink\",\n        \"className\": \"header-anchor after\"\n      }}><i parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></i></a></h3>\n    <ul>\n      <li parentName=\"ul\">{`The colour contrast between the loading spinner and its background must comply with `}<Link href=\"https://www.w3.org/TR/WCAG21/#contrast-minimum\" external mdxType=\"Link\">{`AA Level contrast ratios`}</Link>{`. You can find more information about accessible colour combinations in `}<a parentName=\"li\" {...{\n          \"href\": \"/design-tokens/colour\"\n        }}>{`Colour design token documentation`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`Multiple simultaneous loading spinners can be very confusing for assistive technologies. `}<strong parentName=\"li\">{`HDS Loading spinner React component is built in a way that only reads one alert for screen readers`}</strong>{` - even if there were multiple on the screen. If you are unable to use this feature or it fits your needs poorly (e.g. your project does not use JavaScript), please consider using only one spinner at a time and giving that one spinner the most accurate possible description.`}</li>\n      <li parentName=\"ul\">{`HDS Loading spinner must be given labels to describe the loading event. Use `}<inlineCode parentName=\"li\">{`loadingText`}</inlineCode>{` prop for description for loading and `}<inlineCode parentName=\"li\">{`loadingFinishedText`}</inlineCode>{` prop for description for loading finishing.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Descriptions should not be too detailed. You should use generic descriptions such as \"`}<em parentName=\"li\">{`The page content is loading`}</em>{`\" and \"`}<em parentName=\"li\">{`The page content loading was finished`}</em>{`\".`}</li>\n          <li parentName=\"ul\">{`If there are multiple spinners on the screen, they all must have identical descriptions. Remember that the description is read to screen readers only once.`}</li>\n          <li parentName=\"ul\">{`If the spinner also has a visual label, it can be hidden from assistive technologies to avoid description to be read twice.`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Link","props","console","warn","layoutProps","MDXLayout","children","pageContext","MDXContent","components","mdxType","parentName","href","external","isMDXComponent"],"sourceRoot":""}