(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{"+h3f":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return f})),a.d(t,"default",(function(){return v}));var s=a("cxan"),n=a("+wNj"),r=a("ERkP"),o=a("ZVZ0"),i=a("9Rvw"),l=a("qbsg"),d=a("Ejgk"),p=a("+/BK"),c=a("VFuy"),u=a("tu9/"),b=a("sQ7B"),w=a("vD+s"),h=a("fSvc"),m=a("x0e6"),f=(a("l1C2"),{});void 0!==f&&f&&f===Object(f)&&Object.isExtensible(f)&&!f.hasOwnProperty("__filemeta")&&Object.defineProperty(f,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/components/password_input.mdx"}});var x={_frontmatter:f},y=i.a;function v(e){var t,a,v=e.components,j=Object(n.a)(e,["components"]);return Object(o.b)(y,Object(s.a)({},x,j,{components:v,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"password-input"},"Password input"),Object(o.b)(d.a,{type:"alert",mdxType:"StatusLabel"},"Draft"),Object(o.b)(d.a,{type:"success",style:{marginLeft:"var(--spacing-xs)"},mdxType:"StatusLabel"},"Accessible"),Object(o.b)(w.a,{mdxType:"LargeParagraph"},"A password field is a foundational input field component that the user can interact with and specifically input password data."),Object(o.b)("h2",{id:"principles"},"Principles"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A label should always be provided with password fields."),Object(o.b)("li",{parentName:"ul"},"If possible, validate input in client-side real-time and provide the user with immediate feedback. See ",Object(o.b)("a",Object(s.a)({parentName:"li"},{href:"/patterns/form-validation"}),"HDS Form validation pattern page")," for more information and best practices with password fields."),Object(o.b)("li",{parentName:"ul"},"Password fields should always be mandatory. It is recommended to mark it as a required field."),Object(o.b)("li",{parentName:"ul"},'Verify that "paste" functionality, browser password helpers, and external password managers are allowed for the input.'),Object(o.b)("li",{parentName:"ul"},"HDS password input provides a way to mask/unmask the password. Do not disabled this functionality without a good reason.")),Object(o.b)("h2",{id:"accessibility"},"Accessibility"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"In the case of an insufficient password, aim to provide clear instructions to the user on how to correct the mistake. Always provide a text description of the error."),Object(o.b)("li",{parentName:"ul"},"It is required to use ",Object(o.b)("inlineCode",{parentName:"li"},"autocomplete")," attribute if input control is listed in the common input purposes list. You can read the full list of common input purposes at ",Object(o.b)(h.a,{href:"https://www.w3.org/TR/WCAG21/#input-purposes",external:!0,mdxType:"Link"},"WCAG 2.1 documentation website"),". You can read more about the requirement from ",Object(o.b)(h.a,{href:"https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose",external:!0,mdxType:"Link"},"WCAG 2.1 Identify Input Purpose guideline"),"."),Object(o.b)("li",{parentName:"ul"},"Place sign-in in its own ",Object(o.b)("inlineCode",{parentName:"li"},"form")," element and use ",Object(o.b)("inlineCode",{parentName:"li"},"landmark")," region to mark the login area. This allows assistive technologies to quickly locate and skip to the login section.")),Object(o.b)("h2",{id:"security"},"Security"),Object(o.b)("p",null,"As HDS password input provides only the front-end solution, remember that you need to take care of the security in your project.\nHere are some good practices you need to consider."),Object(o.b)("h3",{id:"general-security"},"General Security"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Do not prevent the user from copying and pasting the password into the field."),Object(o.b)("li",{parentName:"ul"},"Prefer using ready authentication libraries and services, and familiarize yourself properly with their implementation."),Object(o.b)("li",{parentName:"ul"},"In City of Helsinki Services, always use Helsinki Profiili authentication if possible."),Object(o.b)("li",{parentName:"ul"},"Never store the password in a readable form. Always use proper hash algorithms."),Object(o.b)("li",{parentName:"ul"},"Always protect the communication with secure connections (TLS 1.2 or newer)."),Object(o.b)("li",{parentName:"ul"},"Encourage usage of multi-factor authentication and password managers.")),Object(o.b)("h3",{id:"creating-a-new-password"},"Creating a new password"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Inform user properly what the requirements for their password are."),Object(o.b)("li",{parentName:"ul"},"Do not accept password matching user identifier, e.g. a username or an email."),Object(o.b)("li",{parentName:"ul"},"Do not truncate, sanitize, or format in any way the password user has given."),Object(o.b)("li",{parentName:"ul"},"Set minimum length for password 12 to 16 characters."),Object(o.b)("li",{parentName:"ul"},"Avoid setting a maximum password length smaller than 128 characters."),Object(o.b)("li",{parentName:"ul"},"If possible, allow the password input to reflect the strength of the password entered when the password component is used for creating anew password."),Object(o.b)("li",{parentName:"ul"},"If possible, add other programmatic assistance. Detect and suggest changes to provide the user with assistance in generating strong passwords.")),Object(o.b)("h3",{id:"using-password-to-log-in"},"Using password to log in"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"In an error message, you should not declare whether the username or the password is wrong but give general instructions to fix the problem.")),Object(o.b)("h2",{id:"usage-and-variations"},"Usage and variations"),Object(o.b)("h3",{id:"default-password-input"},"Default password input"),Object(o.b)("p",null,"A default HDS password input includes an icon to mask and unmask the password."),Object(o.b)(l.c,{__position:2,__code:'<div\n  style={{\n    maxWidth: \'400px\',\n  }}\n>\n  <PasswordInput\n    concealPasswordButtonAriaLabel="Hide password"\n    helperText="Assistive text"\n    id="Default"\n    includeShowPasswordButton\n    label="Label"\n    revealPasswordButtonAriaLabel="Show password"\n  />\n  <PasswordInput\n    concealPasswordButtonAriaLabel="Hide password"\n    defaultValue="0451234567"\n    disabled\n    helperText="Assistive text"\n    id="Disabled"\n    includeShowPasswordButton\n    label="Label for disabled"\n    revealPasswordButtonAriaLabel="Show password"\n    style={{ marginTop: \'var(--spacing-s)\' }}\n  />\n\n  <PasswordInput\n    concealPasswordButtonAriaLabel="Hide password"\n    errorText="Error text"\n    helperText="Assistive text"\n    id="Error"\n    includeShowPasswordButton\n    invalid\n    label="Label for invalid input"\n    revealPasswordButtonAriaLabel="Show password"\n    style={{ marginTop: \'var(--spacing-s)\' }}\n  />\n\n  <PasswordInput\n    concealPasswordButtonAriaLabel="Hide password"\n    helperText="Assistive text"\n    id="Success"\n    includeShowPasswordButton\n    label="Label for success input"\n    revealPasswordButtonAriaLabel="Show password"\n    successText="Success text"\n    style={{ marginTop: \'var(--spacing-s)\' }}\n  />\n</div>',__scope:(t={props:j,DefaultLayout:i.a,Playground:l.c,StatusLabel:d.a,PasswordInput:p.a,Button:c.a,IconEye:u.a,IconEyeCrossed:u.b,ColorBox:b.a,LargeParagraph:w.a,Link:h.a,Text:m.a},t.DefaultLayout=i.a,t._frontmatter=f,t),mdxType:"Playground"},Object(o.b)("div",{style:{maxWidth:"400px"}},Object(o.b)(p.a,{concealPasswordButtonAriaLabel:"Hide password",helperText:"Assistive text",id:"Default",includeShowPasswordButton:!0,label:"Label",revealPasswordButtonAriaLabel:"Show password",mdxType:"PasswordInput"}),Object(o.b)(p.a,{concealPasswordButtonAriaLabel:"Hide password",defaultValue:"0451234567",disabled:!0,helperText:"Assistive text",id:"Disabled",includeShowPasswordButton:!0,label:"Label for disabled",revealPasswordButtonAriaLabel:"Show password",style:{marginTop:"var(--spacing-s)"},mdxType:"PasswordInput"}),Object(o.b)(p.a,{concealPasswordButtonAriaLabel:"Hide password",errorText:"Error text",helperText:"Assistive text",id:"Error",includeShowPasswordButton:!0,invalid:!0,label:"Label for invalid input",revealPasswordButtonAriaLabel:"Show password",style:{marginTop:"var(--spacing-s)"},mdxType:"PasswordInput"}),Object(o.b)(p.a,{concealPasswordButtonAriaLabel:"Hide password",helperText:"Assistive text",id:"Success",includeShowPasswordButton:!0,label:"Label for success input",revealPasswordButtonAriaLabel:"Show password",successText:"Success text",style:{marginTop:"var(--spacing-s)"},mdxType:"PasswordInput"}))),Object(o.b)("h4",{id:"core-code-example"},"Core code example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-html"}),'   <div class="hds-text-input">\n       <label for="input" class="hds-text-input__label">\n         Label text\n         <span class="hds-text-input__required">*</span>\n       </label>\n     <div class="hds-text-input__input-wrapper">\n       <input\n         id="input1"\n         class="hds-text-input__input"\n         type="password"\n       />\n       <div class="hds-text-input__buttons">\n         <button\n           type="button"\n           aria-label="Show"\n           class="hds-text-input__button"\n         >\n           <i class="hds-icon hds-icon--eye hds-icon--size-s" aria-hidden="true"></i>\n       </div>\n     </div>\n     <span class="hds-text-input__helper-text">Assistive text</span>\n    </div>\n')),Object(o.b)("h4",{id:"react-code-example"},"React code example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-tsx"}),'<PasswordInput\n    concealPasswordButtonAriaLabel="Hide password"\n    helperText="Assistive text"\n    id="Default"\n    includeShowPasswordButton\n    label="Label"\n    revealPasswordButtonAriaLabel="Show password"\n/>\n\n<PasswordInput\n    concealPasswordButtonAriaLabel="Hide password"\n    defaultValue="0451234567"\n    disabled\n    helperText="Assistive text"\n    id="Disabled"\n    includeShowPasswordButton\n    label="Label for disabled"\n    revealPasswordButtonAriaLabel="Show password"\n/>\n\n<PasswordInput\n    concealPasswordButtonAriaLabel="Hide password"\n    errorText="Error text"\n    helperText="Assistive text"\n    id="Error"\n    includeShowPasswordButton\n    invalid\n    label="Label for invalid input"\n    revealPasswordButtonAriaLabel="Show password"\n/>\n\n<PasswordInput\n    concealPasswordButtonAriaLabel="Hide password"\n    helperText="Assistive text"\n    id="Success"\n    includeShowPasswordButton\n    label="Label for success input"\n    revealPasswordButtonAriaLabel="Show password"\n    successText="Success text"\n/>\n')),Object(o.b)("h3",{id:"password-input-with-an-external-button"},"Password input with an external button"),Object(o.b)("p",null,"If necessary, the mask/unmask icon can be removed and the feature controlled with an external button element."),Object(o.b)(l.c,{__position:3,__code:"() => {\n  const [revealPassword, setRevealPassword] = React.useState(false)\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: '400px 200px',\n        gap: '20px',\n      }}\n    >\n      <PasswordInput\n        label=\"Label for external show password button\"\n        id=\"external-password-button\"\n        includeShowPasswordButton={false}\n        helperText=\"Assistive text\"\n        type={revealPassword ? 'text' : 'password'}\n        style={{ maxWidth: '400px' }}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          flexDirection: 'column',\n        }}\n      >\n        <Button\n          variant=\"supplementary\"\n          onClick={() => setRevealPassword(!revealPassword)}\n          iconLeft={\n            revealPassword ? (\n              <IconEyeCrossed aria-hidden />\n            ) : (\n              <IconEye aria-hidden />\n            )\n          }\n        >\n          {revealPassword ? 'Hide password' : 'Show password'}\n        </Button>\n      </div>\n    </div>\n  )\n}",__scope:(a={props:j,DefaultLayout:i.a,Playground:l.c,StatusLabel:d.a,PasswordInput:p.a,Button:c.a,IconEye:u.a,IconEyeCrossed:u.b,ColorBox:b.a,LargeParagraph:w.a,Link:h.a,Text:m.a},a.DefaultLayout=i.a,a._frontmatter=f,a),mdxType:"Playground"},(function(){var e=r.useState(!1),t=e[0],a=e[1];return Object(o.b)("div",{style:{display:"grid",gridTemplateColumns:"400px 200px",gap:"20px"}},Object(o.b)(p.a,{label:"Label for external show password button",id:"external-password-button",includeShowPasswordButton:!1,helperText:"Assistive text",type:t?"text":"password",style:{maxWidth:"400px"},mdxType:"PasswordInput"}),Object(o.b)("div",{style:{display:"flex",justifyContent:"center",flexDirection:"column"}},Object(o.b)(c.a,{variant:"supplementary",onClick:function(){return a(!t)},iconLeft:t?Object(o.b)(u.b,{"aria-hidden":!0,mdxType:"IconEyeCrossed"}):Object(o.b)(u.a,{"aria-hidden":!0,mdxType:"IconEye"}),mdxType:"Button"},t?"Hide password":"Show password")))})),Object(o.b)("h4",{id:"react-code-example-1"},"React code example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-tsx"}),"{() => {\n  const [revealPassword, setRevealPassword] = React.useState(false);\n  return (\n    <div style={{ display: \"grid\", gridTemplateColumns: \"400px 200px\", gap: \"20px\" }}>\n      <PasswordInput\n        label=\"Label for external show password button\"\n        id=\"external-password-button\"\n        includeShowPasswordButton={false}\n        helperText=\"Assistive text\"\n        type={revealPassword ? 'text' : 'password'}\n        style={{maxWidth: '400px'}}\n      />\n      <div style={{ display: 'flex', justifyContent: 'center', flexDirection: 'column' }}>\n        <Button\n          variant=\"supplementary\"\n          onClick={() => setRevealPassword(!revealPassword)}\n          iconLeft={revealPassword ? <IconEyeCrossed aria-hidden /> : <IconEye aria-hidden />}\n        >\n          {revealPassword ? 'Hide password' : 'Show password'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n")),Object(o.b)("h2",{id:"demos--api"},"Demos & API"),Object(o.b)("h3",{id:"core"},"Core"),Object(o.b)("p",null,Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"/storybook/core/?path=/story/components-password-input--default"}),"Password input in hds-core")),Object(o.b)("h3",{id:"react"},"React"),Object(o.b)("p",null,Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"/storybook/react/?path=/story/components-password-input--default"}),"Password input in hds-react")),Object(o.b)("p",null,Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"/storybook/react/?path=/docs/components-password-input--default"}),"PasswordInput API")))}void 0!==v&&v&&v===Object(v)&&Object.isExtensible(v)&&!v.hasOwnProperty("__filemeta")&&Object.defineProperty(v,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/components/password_input.mdx"}}),v.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-components-password-input-mdx-6594612b964002c17767.js.map