{"version":3,"sources":["webpack:///../docs/components/toggle.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","type","style","marginLeft","parentName","href","external","__position","__code","__scope","Playground","StatusLabel","ToggleButton","LargeParagraph","Link","React","checked1","setChecked1","checked2","setChecked2","id","label","checked","onChange","disabled","maxWidth","variant","isMDXComponent"],"mappings":"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","file":"component---docs-components-toggle-mdx-53ae42428f9587944d37.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mikanevalainen/Documents/code/helsinki-design-system/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { StatusLabel, ToggleButton } from 'hds-react';\nimport LargeParagraph from '../../src/components/LargeParagraph';\nimport Link from '../../src/components/Link';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"toggle-button\"\n    }}>{`Toggle button`}</h1>\n    <StatusLabel type=\"alert\" mdxType=\"StatusLabel\">Draft</StatusLabel>\n    <StatusLabel type=\"success\" style={{\n      marginLeft: 'var(--spacing-xs)'\n    }} mdxType=\"StatusLabel\">\n  Accessible\n    </StatusLabel>\n    <LargeParagraph mdxType=\"LargeParagraph\">\n  Toggle button allows the user to switch between two distinct states such as \"On\" and \"Off\".\n    </LargeParagraph>\n    <h2 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`A label should always be provided with a toggle button.`}</strong>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Make sure that the label is clear and concise. A good toggle button label describes the effect that will happen when the toggle button is set to \"On\" position.`}</li>\n          <li parentName=\"ul\">{`For example, use the label \"`}<em parentName=\"li\">{`Allow notifications`}</em>{`\" instead of \"`}<em parentName=\"li\">{`Do you want to receive notifications?`}</em>{`\".`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`The toggle button should have an immediate effect when activated.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Toggle buttons have been inspired by real-world physical switches (e.g. a light switch). Therefore users expect something to happen immediately when the toggle button is activated.`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`Also, avoid using toggle buttons if the effect requires an asynchronous call.`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">{`Toggle buttons must not be used in forms that require pressing a submit button in order to the selection come into effect - unless they have an immediate effect inside the form.`}</li>\n          <li parentName=\"ul\">{`If your toggle button does not have an immediate effect, use a single `}<a parentName=\"li\" {...{\n              \"href\": \"/components/checkbox\"\n            }}>{`Checkbox component`}</a>{` instead.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Toggle button will always have a default option. Toggle buttons that do not have a state at all (neither \"On\" or \"Off\") must not be used.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`It is advisable to use colour combinations provided by the implementation.`}</strong>{` These combinations are ensured to comply with WCAG AA requirements. When customising colours, refer to `}<a parentName=\"li\" {...{\n          \"href\": \"/design-tokens/colour\",\n          \"title\": \"Colour\"\n        }}>{`colour guidelines`}</a>{` to ensure accessibility.`}</li>\n      <li parentName=\"ul\">{`If the toggle button makes other elements appear on the view, those elements should be located next to the toggle button - preferably right after or below it.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`While not recommended, if a toggle button makes elements appear in other parts of the user interface, you need to make sure to notify assistive technologies about the change. You can use `}<a parentName=\"li\" {...{\n              \"href\": \"/components/notification\"\n            }}>{`HDS Notification component`}</a>{` for this purpose.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`HDS Toggle button includes a small animation when the toggle state is changed. However, the animation is considered non-decorative and therefore it does not have to be able to be disabled. See `}<Link href=\"https://www.w3.org/WAI/WCAG21/Understanding/animation-from-interactions.html\" external mdxType=\"Link\">{`WCAG 2.3.3 Animation from Interactions guideline`}</Link>{` for more information.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"usage--variations\"\n    }}>{`Usage & variations`}</h2>\n    <h3 {...{\n      \"id\": \"toggle-button-1\"\n    }}>{`Toggle button`}</h3>\n    <p>{`The default HDS toggle button variant includes a label above the toggle button familiar from other HDS form components.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [checked1, setChecked1] = React.useState(false)\\n  const [checked2, setChecked2] = React.useState(false)\\n  return (\\n    <>\\n      <ToggleButton\\n        id=\\\"toggle-button-1\\\"\\n        label=\\\"Label\\\"\\n        checked={checked1}\\n        onChange={() => setChecked1(!checked1)}\\n      />\\n      <br />\\n      <ToggleButton\\n        id=\\\"toggle-button-2\\\"\\n        disabled\\n        label=\\\"Label\\\"\\n        checked={checked2}\\n        onChange={() => setChecked2(!checked2)}\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      StatusLabel,\n      ToggleButton,\n      LargeParagraph,\n      Link,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [checked1, setChecked1] = React.useState(false);\n        const [checked2, setChecked2] = React.useState(false);\n        return <>\n        <ToggleButton id=\"toggle-button-1\" label=\"Label\" checked={checked1} onChange={() => setChecked1(!checked1)} mdxType=\"ToggleButton\" />\n        <br />\n        <ToggleButton id=\"toggle-button-2\" disabled label=\"Label\" checked={checked2} onChange={() => setChecked2(!checked2)} mdxType=\"ToggleButton\" />\n      </>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"react-code-example\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`{\n  () => {\n    const [checked1, setChecked1] = React.useState(false);\n    const [checked2, setChecked2] = React.useState(false);\n    return (\n      <>\n        <ToggleButton id=\"toggle-button-1\" label=\"Label\" checked={checked1} onChange={() => setChecked1(!checked1)} />\n        <br />\n        <ToggleButton\n          id=\"toggle-button-2\"\n          disabled\n          label=\"Label\"\n          checked={checked2}\n          onChange={() => setChecked2(!checked2)}\n        />\n      </>\n    );\n  };\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"toggle-button-with-a-horizontal-label\"\n    }}>{`Toggle button with a horizontal label`}</h3>\n    <p>{`The toggle button label can also be positioned horizontally. This alignment is often used on smaller screens (e.g. mobile phones) and tighter user interface spaces.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [checked1, setChecked1] = React.useState(false)\\n  const [checked2, setChecked2] = React.useState(false)\\n  return (\\n    <>\\n      <div style={{ maxWidth: \\'320px\\' }}>\\n        <ToggleButton\\n          id=\\\"toggle-button-1\\\"\\n          label=\\\"Label\\\"\\n          checked={checked1}\\n          onChange={() => setChecked1(!checked1)}\\n          variant=\\\"inline\\\"\\n        />\\n        <br />\\n        <ToggleButton\\n          id=\\\"toggle-button-2\\\"\\n          disabled\\n          label=\\\"Label\\\"\\n          checked={checked2}\\n          onChange={() => setChecked2(!checked2)}\\n          variant=\\\"inline\\\"\\n        />\\n      </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      StatusLabel,\n      ToggleButton,\n      LargeParagraph,\n      Link,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [checked1, setChecked1] = React.useState(false);\n        const [checked2, setChecked2] = React.useState(false);\n        return <>\n        <div style={{\n            maxWidth: '320px'\n          }}>\n          <ToggleButton id=\"toggle-button-1\" label=\"Label\" checked={checked1} onChange={() => setChecked1(!checked1)} variant=\"inline\" mdxType=\"ToggleButton\" />\n          <br />\n          <ToggleButton id=\"toggle-button-2\" disabled label=\"Label\" checked={checked2} onChange={() => setChecked2(!checked2)} variant=\"inline\" mdxType=\"ToggleButton\" />\n        </div>\n      </>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"react-code-example-1\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`{\n  () => {\n    const [checked1, setChecked1] = React.useState(false);\n    const [checked2, setChecked2] = React.useState(false);\n    return (\n      <>\n        <div style={{ maxWidth: '320px' }}>\n          <ToggleButton\n            id=\"toggle-button-1\"\n            label=\"Label\"\n            checked={checked1}\n            onChange={() => setChecked1(!checked1)}\n            variant=\"inline\"\n          />\n          <br />\n          <ToggleButton\n            id=\"toggle-button-2\"\n            disabled\n            label=\"Label\"\n            checked={checked2}\n            onChange={() => setChecked2(!checked2)}\n            variant=\"inline\"\n          />\n        </div>\n      </>\n    );\n  };\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demos--api\"\n    }}>{`Demos & API`}</h2>\n    <h3 {...{\n      \"id\": \"react\"\n    }}>{`React`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/story/components-togglebutton--default\"\n      }}>{`Toggle buttons in hds-react`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/docs/components-togglebutton--default\"\n      }}>{`Toggle button API`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}