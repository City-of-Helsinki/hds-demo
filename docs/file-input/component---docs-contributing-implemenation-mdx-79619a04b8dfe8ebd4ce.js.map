{"version":3,"sources":["webpack:///../docs/Contributing/implemenation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","href","external","isMDXComponent"],"mappings":"kRASaA,G,UAAe,S,qNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,kCADR,kCAGA,YAAC,IAAD,CAAgBA,QAAQ,kBAAxB,0KAGA,uEAAkD,YAAC,IAAD,CAAMC,KAAK,wGAAwGC,UAAQ,EAACF,QAAQ,QAApI,gBAAlD,WAAwN,YAAC,IAAD,CAAMC,KAAK,6DAA6DC,UAAQ,EAACF,QAAQ,QAAzF,yBAAxN,KACA,iBAAQ,CACN,GAAM,iCADR,iCAGA,2EAAsD,YAAC,IAAD,CAAMC,KAAK,8DAA8DC,UAAQ,EAACF,QAAQ,QAA1F,8BACtD,iBAAQ,CACN,GAAM,kBADR,kBAGA,mLACA,2CAAsB,YAAC,IAAD,CAAMC,KAAK,uGAAuGD,QAAQ,QAA1H,qBAAtB,sJACA,wCAAmB,YAAC,IAAD,CAAMC,KAAK,sBAAsBC,UAAQ,EAACF,QAAQ,QAAlD,8BAAnB,oFACA,iBAAQ,CACN,GAAM,oBADR,oBAGA,+DAA0C,YAAC,IAAD,CAAMC,KAAK,4BAA4BD,QAAQ,QAA/C,sBAC1C,qEACA,gEACA,oEACA,kEAA6C,YAAC,IAAD,CAAMC,KAAK,8BAA8BD,QAAQ,QAAjD,oBAC7C,iBAAQ,CACN,GAAM,4BADR,4BAGA,0FAAqE,YAAC,IAAD,CAAMC,KAAK,yGAAyGD,QAAQ,QAA5H,gBACrE,kLACkF,YAAC,IAAD,CAAMC,KAAK,sIAAsID,QAAQ,QAAzJ,WADlF,+CAIA,iDAA4B,YAAC,IAAD,CAAMC,KAAK,yGAAyGD,QAAQ,QAA5H,qBAC5B,iBAAQ,CACN,GAAM,WADR,WAGA,sJAAiI,YAAC,IAAD,CAAMC,KAAK,qBAAqBD,QAAQ,QAAxC,QAAjI,sBAzCK,8CAyCwP,YAAC,IAAD,CAAMC,KAAK,wIAAwID,QAAQ,QAA3J,2BAC7P,qCAAgB,YAAC,IAAD,CAAMC,KAAK,uBAAuBD,QAAQ,QAA1C,QAAhB,uJACA,0FAAqE,YAAC,IAAD,CAAMC,KAAK,8CAA8CD,QAAQ,QAAjE,2B,mNAKzEH,EAAWM,gBAAiB","file":"component---docs-contributing-implemenation-mdx-79619a04b8dfe8ebd4ce.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mikanevalainen/Documents/code/helsinki-design-system/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Image from \"../../src/components/Image\";\nimport LargeParagraph from \"../../src/components/LargeParagraph\";\nimport Link from \"../../src/components/Link\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"contributing-to-implementation\"\n    }}>{`Contributing to implementation`}</h1>\n    <LargeParagraph mdxType=\"LargeParagraph\">\n    Ready made components are what make HDS tick. You can contribute to HDS React and Core libraries by proposing new implementations and bugfixes to existing components.\n    </LargeParagraph>\n    <p>When contributing for implementation, create a <Link href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request\" external mdxType=\"Link\">pull request</Link> to the <Link href=\"https://github.com/City-of-Helsinki/helsinki-design-system\" external mdxType=\"Link\">HDS GitHub repository</Link>.</p>\n    <h3 {...{\n      \"id\": \"guidelines-for-implementation\"\n    }}>{`Guidelines for implementation`}</h3>\n    <li>HDS follows dev.hel.fi frontend coding standards: <Link href=\"https://dev.hel.fi/coding-standards#frontend-code-standards\" external mdxType=\"Link\">Frontend coding standards</Link></li>\n    <h4 {...{\n      \"id\": \"general-guides\"\n    }}>{`General guides`}</h4>\n    <li>Do not merge the pull request after it is accepted. The HDS team will merge it. Merging the PR has a side-effect that will update the documentation site.</li>\n    <li>Remember to apply <Link href=\"https://github.com/City-of-Helsinki/helsinki-design-system/tree/master/packages/design-tokens/tokens\" mdxType=\"Link\">HDS Design Tokens</Link> when creating a component. Instead of specifying pixel values, colours, fonts, or breakpoints by yourself, apply those from design tokens instead</li>\n    <li>Take a look at <Link href=\"https://dev.hel.fi/\" external mdxType=\"Link\">Develop with Helsinki site</Link> for practical details for developing open source code for the City of Helsinki.</li>\n    <h4 {...{\n      \"id\": \"hds-technologies\"\n    }}>{`HDS Technologies`}</h4>\n    <li>HDS React and HDS Core both apply the <Link href=\"https://storybook.js.org/\" mdxType=\"Link\">Storybook library</Link></li>\n    <li>HDS React is built with Typescript and SASS</li>\n    <li>HDS Core is built with pure JS and CSS</li>\n    <li>HDS applies yarn as its dependency manager</li>\n    <li>HDS applies git for version control with <Link href=\"https://git-lfs.github.com/\" mdxType=\"Link\">GIT-LFS support</Link></li>\n    <h4 {...{\n      \"id\": \"creating-a-new-component\"\n    }}>{`Creating a new component`}</h4>\n    <li>Apply the Scaffolding yarn script when creating a new component: <Link href=\"https://github.com/City-of-Helsinki/helsinki-design-system/blob/master/packages/react/package.json#L17\" mdxType=\"Link\">Scaffolding</Link></li>\n    <li>For simple components, create both versions, HDS Core and HDS React.\n  Create common styles to HDS core that you can then import to HDS React like in this <Link href=\"https://github.com/City-of-Helsinki/helsinki-design-system/blob/master/packages/react/src/components/textInput/TextInput.module.css\" mdxType=\"Link\">example</Link>.\n  HDS React has HDS Core as its dependency.\n    </li>\n    <li>Add ready components to <Link href=\"https://github.com/City-of-Helsinki/helsinki-design-system/blob/master/packages/react/rollup.config.js\" mdxType=\"Link\">rollup.config.js</Link></li>\n    <h4 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h4>\n    <li>Write unit tests for each component. Test rendering, accessibility, and possible functionality of the component. HDS applies <Link href=\"https://jestjs.io/\" mdxType=\"Link\">Jest</Link> for unit testing </li>. Example of unit tests can be found here: <Link href=\"https://github.com/City-of-Helsinki/helsinki-design-system/blob/master/packages/react/src/components/numberInput/NumberInput.test.tsx\" mdxType=\"Link\">Number input unit tests</Link>\n    <li>HDS applies <Link href=\"https://loki.js.org/\" mdxType=\"Link\">Loki</Link> for visual regression testing. Loki is integrated with Storybook. Hence it's important to add a story for each different UI state of the component</li>\n    <li>It is a good idea to test the component independently in a fresh <Link href=\"https://github.com/City-of-Helsinki/hds-cra\" mdxType=\"Link\">Create React App</Link></li>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}