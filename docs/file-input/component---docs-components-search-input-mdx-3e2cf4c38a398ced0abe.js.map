{"version":3,"sources":["webpack:///../docs/components/search_input.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","type","style","marginLeft","parentName","__position","__code","__scope","Playground","SearchInput","StatusLabel","ColorBox","LargeParagraph","Text","label","helperText","searchButtonAriaLabel","clearButtonAriaLabel","onSubmit","submittedValue","console","log","fruits","map","fruit","value","suggestionLabelField","getSuggestions","inputValue","Promise","resolve","reject","filter","toLowerCase","indexOf","filteredItems","setTimeout","educations","education","fontSize","marginBottom","highlightSuggestions","isMDXComponent"],"mappings":"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","file":"component---docs-components-search-input-mdx-3e2cf4c38a398ced0abe.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mikanevalainen/Documents/code/helsinki-design-system/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport { SearchInput, StatusLabel } from \"hds-react\";\nimport ColorBox from \"../../src/components/ColorBox\";\nimport LargeParagraph from \"../../src/components/LargeParagraph\";\nimport Text from \"../../src/components/Text\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"search-input\"\n    }}>{`Search input`}</h1>\n    <StatusLabel type=\"alert\" mdxType=\"StatusLabel\">Draft</StatusLabel>\n    <StatusLabel type=\"success\" style={{\n      marginLeft: 'var(--spacing-xs)'\n    }} mdxType=\"StatusLabel\">Accessible</StatusLabel>\n    <LargeParagraph mdxType=\"LargeParagraph\">\n  A search input allows the user to find relevant content by using different words or phrases as keywords.\n    </LargeParagraph>\n    <h2 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`A label should always be provided with a search input.`}</strong>{` Only exception to this is when search input is used in navigation.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Make sure that the label is clear and concise. The user should immediately understand what the search is for.`}</li>\n          <li parentName=\"ul\">{`Instead of a label, you may provide a button next to the input which states the purpose of the search.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Search field input should fit into one line. Do not use multiline search inputs.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`It is recommended to have only one search per page.`}</strong>{` If you need multiple searches, clearly label them to indicate their purpose.`}</li>\n      <li parentName=\"ul\">{`If possible, provide search suggestions (see With suggestions section for more info). This helps users to find what they are looking for, especially if the searchable items are complex.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Do not use suggestions to present search results. Results should be provided in their own component or a separate page.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Provide descriptive aria labels for the search and clear buttons.`}</li>\n      <li parentName=\"ul\">{`If loading suggestions takes a while, the implementation automatically includes a loading spinner. In this case, remember to provide labels for both the loading and loading finished event.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"usage-and-variations\"\n    }}>{`Usage and variations`}</h2>\n    <h3 {...{\n      \"id\": \"search-input-1\"\n    }}>{`Search input`}</h3>\n    <p>{`The basic version of the search input is a plain text field with search and clear buttons. The search button will initiate the search with the current text input. `}</p>\n    <Playground __position={2} __code={'<SearchInput\\n  label=\\\"Search\\\"\\n  helperText=\\\"Assistive text\\\"\\n  searchButtonAriaLabel=\\\"Search\\\"\\n  clearButtonAriaLabel=\\\"Clear search field\\\"\\n  onSubmit={submittedValue => console.log(\\'Submitted value:\\', submittedValue)}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      SearchInput,\n      StatusLabel,\n      ColorBox,\n      LargeParagraph,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <SearchInput label=\"Search\" helperText=\"Assistive text\" searchButtonAriaLabel=\"Search\" clearButtonAriaLabel=\"Clear search field\" onSubmit={submittedValue => console.log('Submitted value:', submittedValue)} mdxType=\"SearchInput\" />\n    </Playground>\n    <h4 {...{\n      \"id\": \"core-code-example\"\n    }}>{`Core code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"hds-search-input\">\n  <label for=\"example\" class=\"hds-search-input__label\">Search</label>\n  <div class=\"hds-search-input__input-wrapper\">\n    <input\n      id=\"example\"\n      class=\"hds-search-input__input\"\n      type=\"text\"\n    />\n    <div class=\"hds-search-input__buttons\">\n      <button\n        type=\"button\"\n        aria-label=\"Search\"\n        class=\"hds-search-input__button\"\n      >\n        <i class=\"hds-icon hds-icon--search hds-icon--size-s\" aria-hidden=\"true\"></i>\n    </div>\n  </div>\n  <span class=\"hds-search-input__helper-text\">Assistive text</span>\n</div>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"react-code-example\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<SearchInput \n  label=\"Search\" \n  helperText=\"Assistive text\" \n  searchButtonAriaLabel=\"Search\" \n  clearButtonAriaLabel=\"Clear search field\"\n  onSubmit={submittedValue => console.log('Submitted value:', submittedValue)} \n/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"with-suggestions\"\n    }}>{`With suggestions`}</h3>\n    <p>{`If available, suggestions can also be included with the HDS search input. Suggestions are generated by a project supplied function which means it is up to the project to choose how and where the suggestions are made.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const fruits = [\\n    \\'Apple\\',\\n    \\'Apricot\\',\\n    \\'Avocado\\',\\n    \\'Banana\\',\\n    \\'Blackberry\\',\\n    \\'Blueberry\\',\\n    \\'Cherry\\',\\n    \\'Coconut\\',\\n    \\'Cranberry\\',\\n    \\'Date\\',\\n    \\'Dragonfruit\\',\\n    \\'Fig\\',\\n    \\'Gooseberry\\',\\n    \\'Grape\\',\\n    \\'Honeyberry\\',\\n    \\'Jackfruit\\',\\n    \\'Kiwifruit\\',\\n    \\'Lemon\\',\\n    \\'Lime\\',\\n    \\'Mango\\',\\n    \\'Melon\\',\\n    \\'Nectarine\\',\\n    \\'Orange\\',\\n    \\'Papaya\\',\\n    \\'Passionfruit\\',\\n    \\'Peach\\',\\n    \\'Pear\\',\\n    \\'Pineapple\\',\\n    \\'Raspberry\\',\\n    \\'Satsuma\\',\\n    \\'Start fruit\\',\\n    \\'Strawberry\\',\\n    \\'Tangelo\\',\\n    \\'Tomato\\',\\n  ].map(fruit => ({ value: fruit }))\\n\\n  const getSuggestions = inputValue =>\\n    new Promise((resolve, reject) => {\\n      const filteredItems = fruits.filter(fruit => {\\n        return (\\n          fruit.value.toLowerCase().indexOf(inputValue.toLowerCase()) > -1\\n        )\\n      })\\n      resolve(filteredItems)\\n    })\\n\\n  return (\\n    <SearchInput\\n      label=\\\"Search for a fruit\\\"\\n      helperText=\\\"Assistive text\\\"\\n      searchButtonAriaLabel=\\\"Search\\\"\\n      clearButtonAriaLabel=\\\"Clear search field\\\"\\n      suggestionLabelField=\\\"value\\\"\\n      getSuggestions={getSuggestions}\\n      onSubmit={submittedValue =>\\n        console.log(\\'Submitted value:\\', submittedValue)\\n      }\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      SearchInput,\n      StatusLabel,\n      ColorBox,\n      LargeParagraph,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const fruits = ['Apple', 'Apricot', 'Avocado', 'Banana', 'Blackberry', 'Blueberry', 'Cherry', 'Coconut', 'Cranberry', 'Date', 'Dragonfruit', 'Fig', 'Gooseberry', 'Grape', 'Honeyberry', 'Jackfruit', 'Kiwifruit', 'Lemon', 'Lime', 'Mango', 'Melon', 'Nectarine', 'Orange', 'Papaya', 'Passionfruit', 'Peach', 'Pear', 'Pineapple', 'Raspberry', 'Satsuma', 'Start fruit', 'Strawberry', 'Tangelo', 'Tomato'].map(fruit => ({\n          value: fruit\n        }));\n\n        const getSuggestions = inputValue => new Promise((resolve, reject) => {\n          const filteredItems = fruits.filter(fruit => {\n            return fruit.value.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;\n          });\n          resolve(filteredItems);\n        });\n\n        return <SearchInput label=\"Search for a fruit\" helperText=\"Assistive text\" searchButtonAriaLabel=\"Search\" clearButtonAriaLabel=\"Clear search field\" suggestionLabelField=\"value\" getSuggestions={getSuggestions} onSubmit={submittedValue => console.log('Submitted value:', submittedValue)} mdxType=\"SearchInput\" />;\n      }}\n    </Playground>\n    <br />\nWhen fetching suggestions is taking longer than 1.5 seconds, a loading spinner will be displayed below the input until suggestions are received.\n    <br /><br />\n    <Playground __position={5} __code={'() => {\\n  const fruits = [\\n    \\'Apple\\',\\n    \\'Apricot\\',\\n    \\'Avocado\\',\\n    \\'Banana\\',\\n    \\'Blackberry\\',\\n    \\'Blueberry\\',\\n    \\'Cherry\\',\\n    \\'Coconut\\',\\n    \\'Cranberry\\',\\n    \\'Date\\',\\n    \\'Dragonfruit\\',\\n    \\'Fig\\',\\n    \\'Gooseberry\\',\\n    \\'Grape\\',\\n    \\'Honeyberry\\',\\n    \\'Jackfruit\\',\\n    \\'Kiwifruit\\',\\n    \\'Lemon\\',\\n    \\'Lime\\',\\n    \\'Mango\\',\\n    \\'Melon\\',\\n    \\'Nectarine\\',\\n    \\'Orange\\',\\n    \\'Papaya\\',\\n    \\'Passionfruit\\',\\n    \\'Peach\\',\\n    \\'Pear\\',\\n    \\'Pineapple\\',\\n    \\'Raspberry\\',\\n    \\'Satsuma\\',\\n    \\'Start fruit\\',\\n    \\'Strawberry\\',\\n    \\'Tangelo\\',\\n    \\'Tomato\\',\\n  ].map(fruit => ({ value: fruit }))\\n\\n  const getSuggestions = inputValue =>\\n    new Promise((resolve, reject) => {\\n      const filteredItems = fruits.filter(fruit => {\\n        return (\\n          fruit.value.toLowerCase().indexOf(inputValue.toLowerCase()) > -1\\n        )\\n      })\\n      setTimeout(() => resolve(filteredItems), 3000)\\n    })\\n\\n  return (\\n    <SearchInput\\n      label=\\\"Search for a fruit\\\"\\n      helperText=\\\"Assistive text\\\"\\n      searchButtonAriaLabel=\\\"Search\\\"\\n      clearButtonAriaLabel=\\\"Clear search field\\\"\\n      suggestionLabelField=\\\"value\\\"\\n      getSuggestions={getSuggestions}\\n      onSubmit={submittedValue =>\\n        console.log(\\'Submitted value:\\', submittedValue)\\n      }\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      SearchInput,\n      StatusLabel,\n      ColorBox,\n      LargeParagraph,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const fruits = ['Apple', 'Apricot', 'Avocado', 'Banana', 'Blackberry', 'Blueberry', 'Cherry', 'Coconut', 'Cranberry', 'Date', 'Dragonfruit', 'Fig', 'Gooseberry', 'Grape', 'Honeyberry', 'Jackfruit', 'Kiwifruit', 'Lemon', 'Lime', 'Mango', 'Melon', 'Nectarine', 'Orange', 'Papaya', 'Passionfruit', 'Peach', 'Pear', 'Pineapple', 'Raspberry', 'Satsuma', 'Start fruit', 'Strawberry', 'Tangelo', 'Tomato'].map(fruit => ({\n          value: fruit\n        }));\n\n        const getSuggestions = inputValue => new Promise((resolve, reject) => {\n          const filteredItems = fruits.filter(fruit => {\n            return fruit.value.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;\n          });\n          setTimeout(() => resolve(filteredItems), 3000);\n        });\n\n        return <SearchInput label=\"Search for a fruit\" helperText=\"Assistive text\" searchButtonAriaLabel=\"Search\" clearButtonAriaLabel=\"Clear search field\" suggestionLabelField=\"value\" getSuggestions={getSuggestions} onSubmit={submittedValue => console.log('Submitted value:', submittedValue)} mdxType=\"SearchInput\" />;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"react-code-example-1\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`{() => {\n  const fruits = ['Apple', 'Apricot', 'Avocado', 'Banana', 'Blackberry', 'Blueberry', 'Cherry', 'Coconut', 'Cranberry', 'Date', 'Dragonfruit', 'Fig', 'Gooseberry', 'Grape', 'Honeyberry', 'Jackfruit', 'Kiwifruit', 'Lemon', 'Lime', 'Mango', 'Melon', 'Nectarine', 'Orange', 'Papaya', 'Passionfruit', 'Peach', 'Pear', 'Pineapple', 'Raspberry', 'Satsuma', 'Start fruit', 'Strawberry', 'Tangelo', 'Tomato'].map((fruit) => ({ value: fruit }));\n\n  const getSuggestions = (inputValue) => new Promise((resolve, reject) => {\n    const filteredItems = fruits.filter((fruit) => {\n      return fruit.value.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;\n    });\n    resolve(filteredItems);\n  });\n\n  return (\n    <SearchInput \n      label=\"Search for a fruit\" \n      helperText=\"Assistive text\" \n      searchButtonAriaLabel=\"Search\" \n      clearButtonAriaLabel=\"Clear search field\"\n      suggestionLabelField=\"value\"\n      getSuggestions={getSuggestions}\n      onSubmit={submittedValue => console.log('Submitted value:', submittedValue)}\n    />\n  );\n}}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"with-suggestions-and-highlighting\"\n    }}>{`With suggestions and highlighting`}</h3>\n    <p>{`HDS search input also supports suggestion highlighting. This means that the suggestion not part of the initial search keyword is highlighted. In some cases this can be beneficial to the user to differentiate between search suggestions.`}</p>\n    <p>{`Suggestion highlighting is activated with `}<inlineCode parentName=\"p\">{`highlightSuggestions`}</inlineCode>{` property and it becomes visible after at least three characters are typed into the input.`}</p>\n    <p>{`Note! This feature is experimental and we are looking to improve it after project feedback.`}</p>\n    <Playground __position={6} __code={'() => {\\n  const educations = [\\n    \\'Daycare education\\',\\n    \\'Preschool education\\',\\n    \\'Basic education\\',\\n    \\'Upper secondary education\\',\\n    \\'Vocational education\\',\\n    \\'Polytechnic education\\',\\n    \\'University education\\',\\n    \\'Adult education centre\\',\\n  ].map(education => ({ value: education }))\\n\\n  const getSuggestions = inputValue =>\\n    new Promise((resolve, reject) => {\\n      const filteredItems = educations.filter(education => {\\n        return (\\n          education.value.toLowerCase().indexOf(inputValue.toLowerCase()) > -1\\n        )\\n      })\\n      resolve(filteredItems)\\n    })\\n\\n  return (\\n    <>\\n      <div\\n        style={{\\n          fontSize: \\'var(--fontsize-body-m)\\',\\n          marginBottom: \\'var(--spacing-m)\\',\\n        }}\\n      >\\n        To see highlighting in action, search for \\\"education\\\".\\n      </div>\\n      <SearchInput\\n        label=\\\"Search education services\\\"\\n        helperText=\\\"Assistive text\\\"\\n        searchButtonAriaLabel=\\\"Search\\\"\\n        clearButtonAriaLabel=\\\"Clear search field\\\"\\n        highlightSuggestions\\n        suggestionLabelField=\\\"value\\\"\\n        getSuggestions={getSuggestions}\\n        onSubmit={submittedValue =>\\n          console.log(\\'Submitted value:\\', submittedValue)\\n        }\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      SearchInput,\n      StatusLabel,\n      ColorBox,\n      LargeParagraph,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const educations = ['Daycare education', 'Preschool education', 'Basic education', 'Upper secondary education', 'Vocational education', 'Polytechnic education', 'University education', 'Adult education centre'].map(education => ({\n          value: education\n        }));\n\n        const getSuggestions = inputValue => new Promise((resolve, reject) => {\n          const filteredItems = educations.filter(education => {\n            return education.value.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;\n          });\n          resolve(filteredItems);\n        });\n\n        return <>\n        <div style={{\n            fontSize: 'var(--fontsize-body-m)',\n            marginBottom: 'var(--spacing-m)'\n          }}>To see highlighting in action, search for \"education\".</div>\n        <SearchInput label=\"Search education services\" helperText=\"Assistive text\" searchButtonAriaLabel=\"Search\" clearButtonAriaLabel=\"Clear search field\" highlightSuggestions suggestionLabelField=\"value\" getSuggestions={getSuggestions} onSubmit={submittedValue => console.log('Submitted value:', submittedValue)} mdxType=\"SearchInput\" />\n      </>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"react-code-example-2\"\n    }}>{`React code example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`{() => {\n  const educations = ['Daycare education', 'Preschool education', 'Basic education', 'Upper secondary education', 'Vocational education', 'Polytechnic education', 'University education', 'Adult education centre'].map((education) => ({ value: education }));\n  \n  const getSuggestions = (inputValue) => new Promise((resolve, reject) => {\n    const filteredItems = educations.filter((education) => {\n      return education.value.toLowerCase().indexOf(inputValue.toLowerCase()) > -1;\n    });\n    resolve(filteredItems);\n  });\n  \n  return (\n    <SearchInput \n      label=\"Search education services\" \n      helperText=\"Assistive text\" \n      searchButtonAriaLabel=\"Search\" \n      clearButtonAriaLabel=\"Clear search field\"\n      highlightSuggestions\n      suggestionLabelField=\"value\"\n      getSuggestions={getSuggestions}\n      onSubmit={submittedValue => console.log('Submitted value:', submittedValue)}\n    />\n  );\n}}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demos--api\"\n    }}>{`Demos & API`}</h2>\n    <h3 {...{\n      \"id\": \"core\"\n    }}>{`Core`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/core/?path=/story/components-search-input--default\"\n      }}>{`Search input in hds-core`}</a></p>\n    <h3 {...{\n      \"id\": \"react\"\n    }}>{`React`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/story/components-searchinput--default\"\n      }}>{`Search input in hds-react`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/storybook/react/?path=/docs/components-searchinput--default\"\n      }}>{`SearchInput API`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}