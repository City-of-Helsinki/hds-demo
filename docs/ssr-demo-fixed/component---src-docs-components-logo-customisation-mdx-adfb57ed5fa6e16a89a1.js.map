{"version":3,"file":"component---src-docs-components-logo-customisation-mdx-adfb57ed5fa6e16a89a1.js","mappings":"sLAcsBA,E,wEALTC,EAAe,CAC1B,KAAQ,iCACR,MAAS,wBAQLC,GALgBF,EAKW,aALH,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,cAASG,KAIZG,EAAc,CAClBL,aAAAA,GAGIM,EAAY,SAAC,GAAD,IAChBC,EADgB,EAChBA,SACAC,EAFgB,EAEhBA,YAFgB,OAGZ,QAAC,UAAD,CAAYA,YAAaA,GAAcD,IAE9B,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGR,GACF,YACD,OAAO,QAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCQ,WAAYA,EAAYC,QAAQ,eAG5E,cACE,GAAM,gBACN,MAAS,CACP,SAAY,aAHhB,iBAKoB,aAAGC,WAAW,KAC9B,KAAQ,iBACR,aAAc,0BACd,UAAa,wBACZ,gBAAMA,WAAW,IAChB,UAAa,4DACb,cAAe,OACf,MAAS,CACP,cAAiB,eAGzB,QAAC,EAAAC,EAAD,CAAcC,KAAK,QAAQC,MAAM,wCAAwCC,UAAU,mBAAmBL,QAAQ,gBAA9G,6GAEF,6BAFE,mCAE+C,6BAF/C,sDAIA,cACE,GAAM,2BACN,MAAS,CACP,SAAY,aAHhB,4BAK+B,aAAGC,WAAW,KACzC,KAAQ,4BACR,aAAc,qCACd,UAAa,wBACZ,gBAAMA,WAAW,IAChB,UAAa,4DACb,cAAe,OACf,MAAS,CACP,cAAiB,eAGzB,6DAA+C,sBAAYA,WAAW,KAAvB,SAA/C,QAAwG,sBAAYA,WAAW,KAAvB,SAAxG,wDACA,8DAAgD,sBAAYA,WAAW,KAAvB,SAAhD,QAAyG,sBAAYA,WAAW,KAAvB,aAAzG,4CACA,cACE,GAAM,wBACN,MAAS,CACP,SAAY,aAHhB,yBAK4B,aAAGA,WAAW,KACtC,KAAQ,yBACR,aAAc,kCACd,UAAa,wBACZ,gBAAMA,WAAW,IAChB,UAAa,4DACb,cAAe,OACf,MAAS,CACP,cAAiB,eAGzB,QAACX,EAAD,CAAYU,QAAQ,eAClB,oBAAK,gBAAMC,WAAW,MAClB,UAAa,gBADZ,yUAaXH,EAAWQ,gBAAiB","sources":["webpack://site/./src/docs/components/logo/customisation.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Logo, Notification } from 'hds-react';\nimport TabsLayout from './tabs.mdx';\nexport const _frontmatter = {\n  \"slug\": \"/components/logo/customisation\",\n  \"title\": \"Logo - Customisation\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Playground = makeShortcode(\"Playground\");\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children,\n  pageContext\n}) => <TabsLayout pageContext={pageContext}>{children}</TabsLayout>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"customisation\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Customisation`}<a parentName=\"h2\" {...{\n        \"href\": \"#customisation\",\n        \"aria-label\": \"customisation permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h2>\n    <Notification type=\"alert\" label=\"Logo customisation works differently!\" className=\"siteNotification\" mdxType=\"Notification\">\n  Logo is an older HDS component and therefore its customisation works slightly differently. Instead of the \n  <code>theme</code> property, you need to use the <code>style</code> property. This will be fixed in a future update.\n    </Notification>\n    <h3 {...{\n      \"id\": \"customisation-properties\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Customisation properties`}<a parentName=\"h3\" {...{\n        \"href\": \"#customisation-properties\",\n        \"aria-label\": \"customisation properties permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <p>{`In Core version, you can either use the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`class`}</inlineCode>{` attributes in the HTML to customise the component.`}</p>\n    <p>{`In React version, you can either use the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` properties to customise the component.`}</p>\n    <h3 {...{\n      \"id\": \"customisation-example\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Customisation example`}<a parentName=\"h3\" {...{\n        \"href\": \"#customisation-example\",\n        \"aria-label\": \"customisation example permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <Playground mdxType=\"Playground\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\"\n        }}>{`<>\n  <Logo language=\"fi\" size=\"small\" style={{ color: 'var(--color-bus)', marginRight: 'var(--spacing-xs)' }} />\n  <Logo language=\"fi\" size=\"medium\" style={{ color: 'var(--color-tram)', marginRight: 'var(--spacing-xs)' }} />\n  <Logo language=\"fi\" size=\"large\" style={{ color: 'var(--color-metro)' }} />\n</>\n`}</code></pre>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Playground","props","console","warn","layoutProps","MDXLayout","children","pageContext","MDXContent","components","mdxType","parentName","N","type","label","className","isMDXComponent"],"sourceRoot":""}