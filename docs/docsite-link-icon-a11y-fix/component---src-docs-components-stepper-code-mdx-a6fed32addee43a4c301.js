"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1817],{13407:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return o},default:function(){return S}});var a=n(63366),l=(n(67294),n(64983)),i=n(13817),s=n(80699),p=n(37274),r=n(47414),d=["components"],o={slug:"/components/stepper/code",title:"Stepper - Code"},c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",t)}},m=c("IconCheckCircleFill"),u=c("IconCrossCircle"),h={_frontmatter:o},k=function(e){var t=e.children,n=e.pageContext;return(0,l.kt)(r.default,{pageContext:n},t)};function S(e){var t=e.components,n=(0,a.Z)(e,d);return(0,l.kt)(k,Object.assign({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"code",style:{position:"relative"}},"Code",(0,l.kt)("a",{parentName:"h2",href:"#code","aria-label":"code permalink",className:"header-anchor after"},(0,l.kt)("i",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,l.kt)("h3",{id:"code-examples",style:{position:"relative"}},"Code examples",(0,l.kt)("a",{parentName:"h3",href:"#code-examples","aria-label":"code examples permalink",className:"header-anchor after"},(0,l.kt)("i",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,l.kt)("h4",{id:"default",style:{position:"relative"}},"Default",(0,l.kt)("a",{parentName:"h4",href:"#default","aria-label":"default permalink",className:"header-anchor after"},(0,l.kt)("i",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,l.kt)(p.ZP,{mdxType:"Playground"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"{() => {\n  const commonReducer = (stepsTotal) => (state, action) => {\n    switch (action.type) {\n      case 'completeStep': {\n        const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n        return {\n          activeStepIndex,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload && index !== stepsTotal - 1) {\n              // current one but not last one\n              return {\n                state: StepState.completed,\n                label: step.label,\n              };\n            }\n            if (index === action.payload + 1) {\n              // next one\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      case 'setActive': {\n        return {\n          activeStepIndex: action.payload,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload) {\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      default:\n        throw new Error();\n    }\n  };\n  const reducer = commonReducer(5);\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div>\n      <Stepper\n        steps={state.steps}\n        language=\"en\"\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n"))),(0,l.kt)("h4",{id:"small",style:{position:"relative"}},"Small",(0,l.kt)("a",{parentName:"h4",href:"#small","aria-label":"small permalink",className:"header-anchor after"},(0,l.kt)("i",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,l.kt)(p.ZP,{mdxType:"Playground"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"{() => {\n  const commonReducer = (stepsTotal) => (state, action) => {\n    switch (action.type) {\n      case 'completeStep': {\n        const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n        return {\n          activeStepIndex,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload && index !== stepsTotal - 1) {\n              // current one but not last one\n              return {\n                state: StepState.completed,\n                label: step.label,\n              };\n            }\n            if (index === action.payload + 1) {\n              // next one\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      case 'setActive': {\n        return {\n          activeStepIndex: action.payload,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload) {\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      default:\n        throw new Error();\n    }\n  };\n  const reducer = commonReducer(5);\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div \n      style={{\n        maxWidth: '480px'\n      }}\n    >\n      <Stepper\n        steps={state.steps}\n        language=\"en\"\n        small\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          height: '80px',\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n"))),(0,l.kt)("h4",{id:"with-a-step-heading",style:{position:"relative"}},"With a step heading",(0,l.kt)("a",{parentName:"h4",href:"#with-a-step-heading","aria-label":"with a step heading permalink",className:"header-anchor after"},(0,l.kt)("i",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,l.kt)(p.ZP,{mdxType:"Playground"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"{() => {\n  const commonReducer = (stepsTotal) => (state, action) => {\n    switch (action.type) {\n      case 'completeStep': {\n        const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n        return {\n          activeStepIndex,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload && index !== stepsTotal - 1) {\n              // current one but not last one\n              return {\n                state: StepState.completed,\n                label: step.label,\n              };\n            }\n            if (index === action.payload + 1) {\n              // next one\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      case 'setActive': {\n        return {\n          activeStepIndex: action.payload,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload) {\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      default:\n        throw new Error();\n    }\n  };\n  const reducer = commonReducer(5);\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div>\n      <Stepper\n        steps={state.steps}\n        language=\"en\"\n        stepHeading\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          height: '80px',\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n"))),(0,l.kt)("h4",{id:"overflow",style:{position:"relative"}},"Overflow",(0,l.kt)("a",{parentName:"h4",href:"#overflow","aria-label":"overflow permalink",className:"header-anchor after"},(0,l.kt)("i",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,l.kt)(p.ZP,{mdxType:"Playground"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"{() => {\n  const commonReducer = (stepsTotal) => (state, action) => {\n    switch (action.type) {\n      case 'completeStep': {\n        const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n        return {\n          activeStepIndex,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload && index !== stepsTotal - 1) {\n              // current one but not last one\n              return {\n                state: StepState.completed,\n                label: step.label,\n              };\n            }\n            if (index === action.payload + 1) {\n              // next one\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      case 'setActive': {\n        return {\n          activeStepIndex: action.payload,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload) {\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      default:\n        throw new Error();\n    }\n  };\n  const reducer = commonReducer(5);\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div \n      style={{\n        maxWidth: '400px'\n      }}\n    >\n      <Stepper\n        steps={state.steps}\n        language=\"en\"\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n"))),(0,l.kt)("h4",{id:"step-states",style:{position:"relative"}},"Step states",(0,l.kt)("a",{parentName:"h4",href:"#step-states","aria-label":"step states permalink",className:"header-anchor after"},(0,l.kt)("i",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,l.kt)(p.ZP,{mdxType:"Playground"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"<Stepper\n  language=\"en\"\n  onStepClick={function noRefCheck(){}}\n  selectedStep={1}\n  steps={[\n    {\n      label: 'Completed',\n      state: StepState.completed\n    },\n    {\n      label: 'Current',\n      state: StepState.available\n    },\n    {\n      label: 'Available',\n      state: StepState.available\n    },\n    {\n      label: 'Needs attention',\n      state: StepState.attention\n    },\n    {\n      label: 'Paused',\n      state: StepState.paused\n    },\n    {\n      label: 'Disabled',\n      state: StepState.disabled\n    }\n  ]}\n/>\n"))),(0,l.kt)("h3",{id:"packages",style:{position:"relative"}},"Packages",(0,l.kt)("a",{parentName:"h3",href:"#packages","aria-label":"packages permalink",className:"header-anchor after"},(0,l.kt)("i",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Package"),(0,l.kt)("th",{parentName:"tr",align:null},"Included"),(0,l.kt)("th",{parentName:"tr",align:null},"Storybook link"),(0,l.kt)("th",{parentName:"tr",align:null},"Source link"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"HDS React")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("div",{style:{display:"flex",gap:"var(--spacing-3-xs)"}},(0,l.kt)(m,{mdxType:"IconCheckCircleFill"})," Yes ")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)(i.L,{openInNewTab:!0,openInNewTabAriaLabel:"Opens in a new tab",href:"/storybook/react/?path=/story/components-stepper--default",mdxType:"Link"},"View in Storybook")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)(s.Z,{openInNewTab:!0,openInNewTabAriaLabel:"Opens in a new tab",href:"https://github.com/City-of-Helsinki/helsinki-design-system/tree/master/packages/react/src/components/stepper",mdxType:"ExternalLink"},"View source"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"HDS Core")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("div",{style:{display:"flex",gap:"var(--spacing-3-xs)"}},(0,l.kt)(u,{mdxType:"IconCrossCircle"})," No ")),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"-")))),(0,l.kt)("h3",{id:"properties",style:{position:"relative"}},"Properties",(0,l.kt)("a",{parentName:"h3",href:"#properties","aria-label":"properties permalink",className:"header-anchor after"},(0,l.kt)("i",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,l.kt)("p",null,"Note! You can find the full list of properties in the ",(0,l.kt)(i.L,{openInNewTab:!0,openInNewTabAriaLabel:"Opens in a new tab",href:"/storybook/react/?path=/docs/components-stepper--default",mdxType:"Link"},"React Storybook.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Values"),(0,l.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"headingClassName")),(0,l.kt)("td",{parentName:"tr",align:null},"A custom class name for step heading."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"language")),(0,l.kt)("td",{parentName:"tr",align:null},"The language of the stepper."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"fi"')," ",(0,l.kt)("inlineCode",{parentName:"td"},'"sv"')," ",(0,l.kt)("inlineCode",{parentName:"td"},'"en"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"fi"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"onStepClick")),(0,l.kt)("td",{parentName:"tr",align:null},"A callback function for custom action on step click."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"function")),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"selectedStep")),(0,l.kt)("td",{parentName:"tr",align:null},"The index of the selected step."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"small")),(0,l.kt)("td",{parentName:"tr",align:null},"If set to true, the small variant is used."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"stepHeading")),(0,l.kt)("td",{parentName:"tr",align:null},"If set to true, a step heading is shown below the stepper."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"stepHeadingAriaLevel")),(0,l.kt)("td",{parentName:"tr",align:null},"A step heading aria level."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},"2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"steps")),(0,l.kt)("td",{parentName:"tr",align:null},"The steps of the stepper."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Steps")),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[Table 1:Stepper properties]"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})))))}S.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-components-stepper-code-mdx-a6fed32addee43a4c301.js.map