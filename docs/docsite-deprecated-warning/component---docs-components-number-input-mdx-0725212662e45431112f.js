(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{"y+y3":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return m})),a.d(t,"default",(function(){return x}));var n=a("cxan"),s=a("+wNj"),i=(a("ERkP"),a("ZVZ0")),l=a("9Rvw"),r=a("qbsg"),u=a("7UOt"),p=a("7Zwg"),o=a("sQ7B"),b=a("vD+s"),c=a("x0e6"),d=(a("l1C2"),["components"]),m={};void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!Object.prototype.hasOwnProperty.call(m,"__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/components/number_input.mdx"}});var h={_frontmatter:m},f=l.a;function x(e){var t,a,x,y=e.components,O=Object(s.a)(e,d);return Object(i.b)(f,Object(n.a)({},h,O,{components:y,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"number-input"},"Number input"),Object(i.b)(u.a,{type:"info",mdxType:"StatusLabel"},"Stable"),Object(i.b)(u.a,{type:"success",style:{marginLeft:"var(--spacing-xs)"},mdxType:"StatusLabel"},"Accessible"),Object(i.b)(b.a,{mdxType:"LargeParagraph"},"A number input allows the user to enter numeric values. It also features optional steppers for increasing or decreasing the value by a set amount."),Object(i.b)("h2",{id:"principles"},"Principles"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"A label should always be provided with a number input."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Make sure that the label is clear and concise. The user should immediately understand what number they are supposed to input."))),Object(i.b)("li",{parentName:"ul"},"HDS Number input also supports displaying an unit for the number. Displaying the unit is not mandatory. Only use it when you think it will help the user.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Display the unit for ",Object(i.b)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/International_System_of_Units"},"SI units")," (such as meters) and currencies."),Object(i.b)("li",{parentName:"ul"},'The unit does not need to be displayed when it is self-evident for the user, such as in "Number of people"'))),Object(i.b)("li",{parentName:"ul"},"It is recommended to give the number input a default value. Placeholders should be avoided in number inputs."),Object(i.b)("li",{parentName:"ul"},"HDS Number input supports visual steppers that can be set to increase and decrease the number value by a set amount.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Steppers can be used when changes to the value are small or when they are intuitive to the user (e.g. from 0 to 100 with steps of 10)."),Object(i.b)("li",{parentName:"ul"},"You should not use steppers when large value changes are expected.")))),Object(i.b)("h2",{id:"accessibility"},"Accessibility"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"HDS number input allows the user to input the date manually without using stepper actions. Whenever you require the user to input numbers, you should also allow manual input."),Object(i.b)("li",{parentName:"ul"},"If steppers are used, provide descriptive aria labels for both increase and decrease actions by using ",Object(i.b)("inlineCode",{parentName:"li"},"minusStepButtonAriaLabel")," and ",Object(i.b)("inlineCode",{parentName:"li"},"plusStepButtonAriaLabel")," props."),Object(i.b)("li",{parentName:"ul"},"If the number needs to follow a specific format, remember to specify it in the assistive text."),Object(i.b)("li",{parentName:"ul"},"Placeholders in number inputs should be avoided. Different screen readers announce placeholders in different ways. It can be very difficult for a screen reader user to differentiate the placeholder from the actual value.")),Object(i.b)("h2",{id:"usage-and-variations"},"Usage and variations"),Object(i.b)("h3",{id:"default-number-input"},"Default number input"),Object(i.b)("p",null,"Default HDS Number input comes without stepper. The number is always inputted manually. Using this over a text input is still helpful since it has a ",Object(i.b)("inlineCode",{parentName:"p"},"type=number")," to aid screen readers and mobile keyboards."),Object(i.b)("p",null,"When applicable, a unit can be set for the input by using the ",Object(i.b)("inlineCode",{parentName:"p"},"unit")," prop."),Object(i.b)(r.c,{__position:2,__code:'<NumberInput\n  helperText="Assistive text"\n  label="Total compensation"\n  unit="€"\n  defaultValue={1000}\n  style={{ maxWidth: \'320px\' }}\n/>\n<NumberInput\n  disabled\n  helperText="Assistive text"\n  label="Total compensation"\n  unit="€"\n  defaultValue={1000}\n  style={{ maxWidth: \'320px\', marginTop: \'var(--spacing-s)\' }}\n/>',__scope:(t={props:O,DefaultLayout:l.a,Playground:r.c,StatusLabel:u.a,NumberInput:p.a,ColorBox:o.a,LargeParagraph:b.a,Text:c.a},t.DefaultLayout=l.a,t._frontmatter=m,t),mdxType:"Playground"},Object(i.b)(p.a,{helperText:"Assistive text",label:"Total compensation",unit:"€",defaultValue:1e3,style:{maxWidth:"320px"},mdxType:"NumberInput"}),Object(i.b)(p.a,{disabled:!0,helperText:"Assistive text",label:"Total compensation",unit:"€",defaultValue:1e3,style:{maxWidth:"320px",marginTop:"var(--spacing-s)"},mdxType:"NumberInput"})),Object(i.b)("h4",{id:"core-code-example"},"Core code example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-html"},'<div class="hds-text-input">\n  <label for="input" class="hds-text-input__label">\n    Total compensation (€)\n    <span class="hds-text-input__required">*</span>\n  </label>\n  <div class="hds-text-input__input-wrapper">\n    <input id="input" value="1000" class="hds-text-input__input" type="number" placeholder="Placeholder" required />\n  </div>\n  <span class="hds-text-input__helper-text">Assistive text</span>\n</div>\n')),Object(i.b)("h4",{id:"react-code-example"},"React code example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},'<NumberInput\n    helperText="Assistive text"\n    label="Total compensation"\n    unit="€"\n    defaultValue={1000}\n/>\n\n<NumberInput\n    disabled\n    helperText="Assistive text"\n    label="Total compensation"\n    unit="€"\n    defaultValue={1000}\n/>\n')),Object(i.b)("h3",{id:"number-input-with-steppers"},"Number input with steppers"),Object(i.b)("p",null,"Steppers can be enabled via providing a ",Object(i.b)("inlineCode",{parentName:"p"},"step")," property. Use this variant when value changes are small and you can determine logical amounts for an increase and a decrease step."),Object(i.b)(r.c,{__position:3,__code:'<NumberInput\n  helperText="Assistive text"\n  label="Number of attendees"\n  minusStepButtonAriaLabel="Decrease by one"\n  plusStepButtonAriaLabel="Increase by one"\n  step={1}\n  defaultValue={5}\n  style={{ maxWidth: \'320px\' }}\n/>',__scope:(a={props:O,DefaultLayout:l.a,Playground:r.c,StatusLabel:u.a,NumberInput:p.a,ColorBox:o.a,LargeParagraph:b.a,Text:c.a},a.DefaultLayout=l.a,a._frontmatter=m,a),mdxType:"Playground"},Object(i.b)(p.a,{helperText:"Assistive text",label:"Number of attendees",minusStepButtonAriaLabel:"Decrease by one",plusStepButtonAriaLabel:"Increase by one",step:1,defaultValue:5,style:{maxWidth:"320px"},mdxType:"NumberInput"})),Object(i.b)("h4",{id:"core-code-example-functionality-differs-from-the-react-one"},"Core code example (functionality differs from the React one):"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-html"},'<div class="hds-text-input">\n  <label for="input" class="hds-text-input__label">\n    Total compensation (€)\n    <span class="hds-text-input__required">*</span>\n  </label>\n  <div class="hds-text-input__input-wrapper">\n    <input id="input" value="1000" class="hds-text-input__input" type="number" step="1" placeholder="Placeholder" required />\n  </div>\n  <span class="hds-text-input__helper-text">Assistive text</span>\n</div>\n')),Object(i.b)("h4",{id:"react-code-example-1"},"React code example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},'<NumberInput\n    helperText="Assistive text"\n    label="Number of attendees"\n    minusStepButtonAriaLabel="Decrease by one"\n    plusStepButtonAriaLabel="Increase by one"\n    step={1}\n    defaultValue={5}\n/>\n')),Object(i.b)("h3",{id:"number-input-with-min-and-max-values"},"Number input with min and max values"),Object(i.b)("p",null,"Steppers can be enabled by providing a ",Object(i.b)("inlineCode",{parentName:"p"},"step")," property. Use this variant when value changes are small and you can determine logical amounts for an increase and a decrease step."),Object(i.b)("p",null,"If your input has special requirements, it is a good practice to describe them in the assistive text."),Object(i.b)(r.c,{__position:4,__code:'<NumberInput\n  helperText="At least 3 attendees are required"\n  label="Number of attendees"\n  min={3}\n  max={99}\n  minusStepButtonAriaLabel="Decrease by one"\n  plusStepButtonAriaLabel="Increase by one"\n  step={1}\n  defaultValue={3}\n  style={{ maxWidth: \'320px\' }}\n/>',__scope:(x={props:O,DefaultLayout:l.a,Playground:r.c,StatusLabel:u.a,NumberInput:p.a,ColorBox:o.a,LargeParagraph:b.a,Text:c.a},x.DefaultLayout=l.a,x._frontmatter=m,x),mdxType:"Playground"},Object(i.b)(p.a,{helperText:"At least 3 attendees are required",label:"Number of attendees",min:3,max:99,minusStepButtonAriaLabel:"Decrease by one",plusStepButtonAriaLabel:"Increase by one",step:1,defaultValue:3,style:{maxWidth:"320px"},mdxType:"NumberInput"})),Object(i.b)("h4",{id:"core-code-example-functionality-differs-from-the-react-one-1"},"Core code example (functionality differs from the React one):"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-html"},'<div class="hds-text-input">\n  <label for="input" class="hds-text-input__label">\n    Number of attendees\n    <span class="hds-text-input__required">*</span>\n  </label>\n  <div class="hds-text-input__input-wrapper">\n    <input id="input" value="1000" class="hds-text-input__input" type="number" step="1" min="3" max="99" placeholder="Placeholder" required />\n  </div>\n  <span class="hds-text-input__helper-text">Assistive text</span>\n</div>\n')),Object(i.b)("h4",{id:"react-code-example-2"},"React code example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},'<NumberInput\n    helperText="At least 3 attendees are required"\n    label="Number of attendees"\n    min={3}\n    max={99}\n    minusStepButtonAriaLabel="Decrease by one"\n    plusStepButtonAriaLabel="Increase by one"\n    step={1}\n    defaultValue={3}\n/>\n')),Object(i.b)("h2",{id:"demos--api"},"Demos & API"),Object(i.b)("h3",{id:"core"},"Core"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"/hds-demo/docsite-deprecated-warning/storybook/core/?path=/story/components-number-input--default"},"Number input in hds-core")),Object(i.b)("h3",{id:"react"},"React"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"/hds-demo/docsite-deprecated-warning/storybook/react/?path=/story/components-numberinput--default"},"Number input in hds-react")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"/hds-demo/docsite-deprecated-warning/storybook/react/?path=/docs/components-numberinput--default"},"NumberInput API")))}void 0!==x&&x&&x===Object(x)&&Object.isExtensible(x)&&!Object.prototype.hasOwnProperty.call(x,"__filemeta")&&Object.defineProperty(x,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/components/number_input.mdx"}}),x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-components-number-input-mdx-0725212662e45431112f.js.map