"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3107],{99304:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return s},default:function(){return m}});var a=n(45987),r=(n(67294),n(64983)),i=n(44186),l=n(88562);const o=["components"],s={slug:"/components/login/customisation",title:"Login - Customisation"},d={_frontmatter:s},c=e=>{let{children:t,pageContext:n}=e;return(0,r.kt)(l.default,{pageContext:n},t)};function m(e){let{components:t}=e,n=(0,a.Z)(e,o);return(0,r.kt)(c,Object.assign({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"creating-and-connecting-your-own-module",style:{position:"relative"}},"Creating and connecting your own module",(0,r.kt)("a",{parentName:"h2",href:"#creating-and-connecting-your-own-module","aria-label":"creating and connecting your own module permalink",className:"header-anchor after"},(0,r.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,r.kt)("p",null,"If there is a need for a deeper connection to other modules, a custom module can be created. Modules can emit signals. Modules are not React-specific, just plain javascript.\nA module passed to the beacon must have the following properties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"namespace")),(0,r.kt)("td",{parentName:"tr",align:null},"String. A unique namespace.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"connect(beacon)")),(0,r.kt)("td",{parentName:"tr",align:null},"Function called when module is added to the beacon")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[Table 1: Custom module properties]"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)(i.ZP,{mdxType:"PlaygroundPreview"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createNamespacedBeacon, ConnectedModule } from 'hds-react';\n\nconst createMyCustomModule = (): ConnectedModule => {\n  const customBeacon = createNamespacedBeacon('myModule');\n  const listener = (signal) => {\n    // this is listenening everything\n  };\n  return {\n    namespace: helperNamespace,\n    connect: (targetBeacon) => {\n      customBeacon.storeBeacon(targetBeacon);\n      customBeacon.addListener(createTriggerForAllSignalTypes(), listener);\n    },\n  };\n};\n"))),(0,r.kt)("h3",{id:"connecting-your-module",style:{position:"relative"}},"Connecting your module",(0,r.kt)("a",{parentName:"h3",href:"#connecting-your-module","aria-label":"connecting your module permalink",className:"header-anchor after"},(0,r.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,r.kt)("p",null,"Modules are automatically connected to other modules when they are passed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"modules")," property of the LoginProvider."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Module.connect()")," is called and when all modules are connected, an ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," signal is emitted for each module. This is done by the beacon."),(0,r.kt)(i.ZP,{mdxType:"PlaygroundPreview"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createNamespacedBeacon, ConnectedModule } from 'hds-react';\n\nconst myModule = createMyCustomModule()\n\nconst providerProperties = {..., modules=[myModule]}\n\n<LoginProvider {...providerProperties}>\n  <Content />\n</LoginProvider>\n"))),(0,r.kt)("h3",{id:"custom-namespaced-beacons-for-modules",style:{position:"relative"}},"Custom namespaced beacons for modules",(0,r.kt)("a",{parentName:"h3",href:"#custom-namespaced-beacons-for-modules","aria-label":"custom namespaced beacons for modules permalink",className:"header-anchor after"},(0,r.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,r.kt)("p",null,"Modules must emit signals in their namespace. Beacon has only one emit function. To make emitting easier, the ",(0,r.kt)("inlineCode",{parentName:"p"},"createNamespacedBeacon")," returns a utility, where all emitted signals have pre-set namespace and there are emit functions for different signal types."),(0,r.kt)("p",null,"This utility also handles cases, where listeners are added before the module is connected to the beacon."),(0,r.kt)("p",null,"It also ignores signals from its namespace, when listening to generic signals."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Return values"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"storeBeacon(beacon)")),(0,r.kt)("td",{parentName:"tr",align:null},"Beacon. Call this from the ",(0,r.kt)("inlineCode",{parentName:"td"},"module.connect()"),". Stores the beacon, so the module does not have to store it."),(0,r.kt)("td",{parentName:"tr",align:null},"none")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"emit(signal)")),(0,r.kt)("td",{parentName:"tr",align:null},"calls beacon.emit, if the beacon is connected"),(0,r.kt)("td",{parentName:"tr",align:null},"none")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addListener(signalProps, listener)")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds a listener for given signal props. Module's own signals are filtered out if the namespace is for all signals."),(0,r.kt)("td",{parentName:"tr",align:null},"Disposer function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"emitError(payload)")),(0,r.kt)("td",{parentName:"tr",align:null},"Emits an error with the given payload"),(0,r.kt)("td",{parentName:"tr",align:null},"Context module or undefined")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"emitEvent(payload, data)")),(0,r.kt)("td",{parentName:"tr",align:null},"Emits an event with the given type and data in the payload"),(0,r.kt)("td",{parentName:"tr",align:null},"Object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"emitStateChange(state,previousState)")),(0,r.kt)("td",{parentName:"tr",align:null},"Emits a stateChange with the given state and previousState in the payload"),(0,r.kt)("td",{parentName:"tr",align:null},"none")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[Table 2: Custom beacon utility functions]"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)(i.ZP,{mdxType:"PlaygroundPreview"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createNamespacedBeacon, ConnectedModule } from 'hds-react';\n\nconst createMyCustomModule = (): ConnectedModule => {\n  let state = 'none';\n  const customBeacon = createNamespacedBeacon('myModule');\n  const listener = (signal) => {\n    if (isErrorSignal) {\n      newState = 'error';\n      customBeacon.emitStateChange(newState, state);\n      state = newState;\n    }\n  };\n  return {\n    namespace: helperNamespace,\n    connect: (targetBeacon) => {\n      customBeacon.storeBeacon(targetBeacon);\n      customBeacon.addListener(createTriggerForAllSignalTypes(), listener);\n    },\n  };\n};\n"))),(0,r.kt)("h3",{id:"emitting-signals",style:{position:"relative"}},"Emitting signals",(0,r.kt)("a",{parentName:"h3",href:"#emitting-signals","aria-label":"emitting signals permalink",className:"header-anchor after"},(0,r.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,r.kt)("p",null,"The following example is for custom modules because components cannot emit signals."),(0,r.kt)(i.ZP,{mdxType:"PlaygroundPreview"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"// beacon is not imported, this example assumes it is in the scope\n\nconst error  = new OidcClientError('Failed', oidcClientError.SIGNIN_ERROR),\n\n// this is the same as\nbeacon.emit({\n  type: errorSignalType,\n  namespace: 'teamHDS',\n  payload: error,\n});\n\n// this\nbeacon.emit(createErrorSignal('teamHDS', error));\n\n// and this - if custom, namespaced beacon is created for 'teamHDS'\ncustomBeacon.emitError(error);\n\n"))),(0,r.kt)("h4",{id:"listening-to-signals",style:{position:"relative"}},"Listening to signals",(0,r.kt)("a",{parentName:"h4",href:"#listening-to-signals","aria-label":"listening to signals permalink",className:"header-anchor after"},(0,r.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,r.kt)("p",null,"A signal listener is a function which receives one argument: the signal. A listener can listen to all signals or just one type or signal with a certain namespace.\nListeners can be even more specific and listen to signals with certain payloads. In short, a listener can listen to any properties of the signal and is triggered when all properties match."),(0,r.kt)("p",null,"The listener is called only if the emitted signal matches the given props."),(0,r.kt)("p",null,"For example, if the trigger props (first argument) passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"beacon.addListener(trigger, listener)")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"{ type:'error' }"),", the listener (second argument) is called when the emitted signal has a matching type. It does not matter what other props the signal has."),(0,r.kt)("p",null,"If the trigger props are ",(0,r.kt)("inlineCode",{parentName:"p"},"{ namespace:'myModule', payload:{type:'click'} }"),", the emitted signal must have those properties with the same, exact values. Other properties are not checked."),(0,r.kt)("p",null,"The trigger can also be a function. Internally all triggers are converted to functions."),(0,r.kt)(i.ZP,{mdxType:"PlaygroundPreview"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const listener = (signal) => {\n  // do something with the signal.\n};\n// listen to all error signals\nconst trigger = { type: 'error' };\nconst disposer = beacon.addListener(trigger, listener);\n// the listener can be removed by calling the returned disposer\ndisposer();\n"))))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-components-login-customisation-mdx-8fb2ef4a48f091a697a4.js.map