"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[9042],{92938:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return o},default:function(){return m}});var a=t(45987),r=(t(67294),t(64983)),i=(t(44186),t(88562));const l=["components"],o={slug:"/components/login/hooks",title:"Login - Hooks"},s=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},d=s("PlaygroundPreview"),k=s("InternalLink"),p={_frontmatter:o},u=e=>{let{children:n,pageContext:t}=e;return(0,r.kt)(i.default,{pageContext:t},n)};function m(e){let{components:n}=e,t=(0,a.Z)(e,l);return(0,r.kt)(u,Object.assign({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"hooks",style:{position:"relative"}},"Hooks",(0,r.kt)("a",{parentName:"h2",href:"#hooks","aria-label":"hooks permalink",className:"header-anchor after"},(0,r.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,r.kt)("p",null,"Hooks are the easiest way to listen to signals. Most hooks return the last triggered signal and re-renders the component. Re-rendering is done only if the listener returns true. So listeners added by hooks must return a boolean."),(0,r.kt)("p",null,"Hooks dispose of the listeners when the component unmounts."),(0,r.kt)("h3",{id:"generic-hooks",style:{position:"relative"}},"Generic hooks",(0,r.kt)("a",{parentName:"h3",href:"#generic-hooks","aria-label":"generic hooks permalink",className:"header-anchor after"},(0,r.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Hook"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"),(0,r.kt)("th",{parentName:"tr",align:null},"Return value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useSignalListener(listener)")),(0,r.kt)("td",{parentName:"tr",align:null},"The listener function. There are no trigger props. The listener is always called when any signal is emitted in any namespace. The listener should return ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," if the component should re-render."),(0,r.kt)("td",{parentName:"tr",align:null},"An array of ",(0,r.kt)("inlineCode",{parentName:"td"},"[Signal or undefined, ()=>void]"),". Latter is a reset function which clears the signal and re-render the component.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useSignalTrackingWithReturnValue(triggerProps)")),(0,r.kt)("td",{parentName:"tr",align:null},"Signal props need to match the incoming signal to trigger re-rendering. The hook creates a trigger from the props and re-renders if trigger returns ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"Same as above")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useSignalTrackingWithCallback(triggerProps, callback)")),(0,r.kt)("td",{parentName:"tr",align:null},"Signal props need to match the incoming signal to trigger the callback function. The hook never causes a re-render. The callback must do it."),(0,r.kt)("td",{parentName:"tr",align:null},"none")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[Table 1: Generic signal listener hooks]"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Important!")," The listener passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"useSignalListener")," must be memoized or the hook will attach a new listener on each render because the props changed. The old one is disposed but to avoid unnecessary listeners, use memoization with ",(0,r.kt)("inlineCode",{parentName:"p"},"useMemo")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"useCallback"),"\nNote that all ",(0,r.kt)("inlineCode",{parentName:"p"},"triggerFor...")," functions are constants and do not need memoization."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useSignalTrackingWithReturnValue")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"useSignalTrackingWithCallback")," store their arguments to React refs, so memoization is not needed."),(0,r.kt)("p",null,"The array returned by the ",(0,r.kt)("inlineCode",{parentName:"p"},"useSignalListener")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"useSignalTrackingWithReturnValue")," have the last signal, if any, and a reset function which clears the last signal. This can be used for tracking certain errors and then resetting the array, when the user has seen a notification about the error."),(0,r.kt)("p",null,"Hooks cannot emit signals."),(0,r.kt)(d,{mdxType:"PlaygroundPreview"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  useSignalListener,\n  useSignalListenerWithReturnValue,\n  triggerForAllSessionPollerErrors,\n  isSessionEndedSignal,\n} from 'hds-react';\n\nconst ListenerComponent = () => {\n  const [ showDialog, setShowDialog ] = useState(false);\n    // listener function must be memoized when useSignalListener is used!\n  const myListener = useCallback(( signal )=>{\n    if( isSessionEndedSignal(signal) ){\n      setShowDialog(true)\n    }\n  },[]);\n  useSignalListener(myListener);\n  if ( showDialog ) {\n    return <Dialog ... />\n  }\n};\n\nconst ListenerComponentWithReturnValue = () => {\n  const [showDialog, setShowDialog] = useState(false);\n  const [sessionEndedSignal] = useSignalTrackingWithReturnValue(triggerForAllSessionPollerErrors);\n  if(isSessionEndedSignal(sessionEndedSignal)){\n    setShowDialog(true)\n  }\n  if (showDialog) {\n    return <Dialog ... />\n  }\n};\n"))),(0,r.kt)("h3",{id:"oidc-client-hooks",style:{position:"relative"}},"Oidc client hooks",(0,r.kt)("a",{parentName:"h3",href:"#oidc-client-hooks","aria-label":"oidc client hooks permalink",className:"header-anchor after"},(0,r.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Hook"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Return value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useOidcClient")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the Oidc client,"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OidcClient"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useAuthenticatedUser")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns a user object, if it is valid and authenticated and passes ",(0,r.kt)(k,{href:"/components/login/modules#methods",mdxType:"InternalLink"},"isValidUser()")," check"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"User")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useCachedAmr")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the user's amr value. It is cached because in some cases it must be decrypted from id_token."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useOidcClientTracking")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an array of ",(0,r.kt)("inlineCode",{parentName:"td"},"[Signal, resetFunction, oidcClient instance]"),". The hook forces the component using it to re-render each time the listener is triggered"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[Signal or undefined, ()=>void, OidcClient]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[Table 2: Oidc client hooks]"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)(d,{mdxType:"PlaygroundPreview"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useOidcClient, useOidcClientTracking, useAuthenticatedUser, useCachedAmr } from 'hds-react';\n\nconst OidcClientHooks = () => {\n  const client = useOidcClient();\n  const [lastSignal, reset, oidcClient] = useOidcClientTracking();\n  const user = useAuthenticatedUser();\n  const amr = useCachedAmr();\n  if (user) {\n    return <p>Your amr is: {amr ? amr[0] : 'none'}</p>;\n  } else {\n    return (\n      <Button\n        onClick={() => {\n          client.login();\n        }}\n      >\n        Log in!\n      </Button>\n    );\n  }\n};\n"))),(0,r.kt)("h3",{id:"api-tokens-client-hooks",style:{position:"relative"}},"Api tokens client hooks",(0,r.kt)("a",{parentName:"h3",href:"#api-tokens-client-hooks","aria-label":"api tokens client hooks permalink",className:"header-anchor after"},(0,r.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Hook"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Return value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useApiTokensClient")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the Api tokens client"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ApiTokensClient"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useApiTokens")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns functions for checking tokens and status of renewal"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{getStoredApiTokens(), isRenewing()}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useApiTokensClientTracking")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an array of ",(0,r.kt)("inlineCode",{parentName:"td"},"[Signal, resetFunction, apiTokensClient instance]"),". The hook forces the component using it to re-render each time the listener is triggered"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[Signal or undefined, ()=>void, ApiTokensClient]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[Table 3: Api tokens client hooks]"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)(d,{mdxType:"PlaygroundPreview"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useApiTokensClient, useApiTokens, useApiTokensClientTracking } from 'hds-react';\n\nconst ApiTokensClientHooks = () => {\n  const client = useApiTokensClient();\n  const { getStoredApiTokens, isRenewing } = useApiTokens();\n  const [lastSignal, reset, apiTokensClient] = useApiTokensClientTracking();\n  if (isRenewing()) {\n    return <p>Your api tokens are renewed!</p>;\n  }\n  if (getStoredApiTokens()) {\n    return <p>You have api tokens!</p>;\n  }\n};\n"))),(0,r.kt)("h3",{id:"session-poller-hooks",style:{position:"relative"}},"Session poller hooks",(0,r.kt)("a",{parentName:"h3",href:"#session-poller-hooks","aria-label":"session poller hooks permalink",className:"header-anchor after"},(0,r.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Hook"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Return value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useSessionPoller")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the Session poller,"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SessionPoller"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"useSessionPollerTracking")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns an array of ",(0,r.kt)("inlineCode",{parentName:"td"},"[Signal, resetFunction, sessionPoller instance]"),". The hook forces the component using it to re-render each time the listener is triggered"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[Signal or undefined, ()=>void, SessionPoller]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[Table 4: Session poller hooks]"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)(d,{mdxType:"PlaygroundPreview"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useSessionPoller, useSessionPollerTracking } from 'hds-react';\n\nconst SessionPollerHooks = () => {\n  const poller = useSessionPoller();\n  const [lastSignal, reset, sessionPoller] = useSessionPollerTracking();\n  if (isSessionPollerStoppedSignal(lastSignal)) {\n    <Button\n      onClick={() => {\n        poller.start();\n      }}\n    >\n      Start polling!\n    </Button>;\n  }\n};\n"))))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-components-login-hooks-mdx-d6a496c053db2348c378.js.map