{"version":3,"file":"component---src-docs-components-stepper-code-mdx-5b218eade6d9c5500fd0.js","mappings":"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","sources":["webpack://site/./src/docs/components/stepper/code.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { useReducer } from 'react';\nimport { Button, Stepper, StepState, IconArrowLeft, Link } from 'hds-react';\nimport ExternalLink from '../../../components/ExternalLink';\nimport Playground from '../../../components/Playground';\nimport TabsLayout from './tabs.mdx';\nexport const _frontmatter = {\n  \"slug\": \"/components/stepper/code\",\n  \"title\": \"Stepper - Code\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst IconCheckCircleFill = makeShortcode(\"IconCheckCircleFill\");\nconst IconCrossCircle = makeShortcode(\"IconCrossCircle\");\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children,\n  pageContext\n}) => <TabsLayout pageContext={pageContext}>{children}</TabsLayout>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"code\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Code`}<a parentName=\"h2\" {...{\n        \"href\": \"#code\",\n        \"aria-label\": \"code permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h2>\n    <h3 {...{\n      \"id\": \"code-examples\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Code examples`}<a parentName=\"h3\" {...{\n        \"href\": \"#code-examples\",\n        \"aria-label\": \"code examples permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <h4 {...{\n      \"id\": \"default\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Default`}<a parentName=\"h4\" {...{\n        \"href\": \"#default\",\n        \"aria-label\": \"default permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <Playground mdxType=\"Playground\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\"\n        }}>{`{() => {\n  const commonReducer = (stepsTotal) => (state, action) => {\n    switch (action.type) {\n      case 'completeStep': {\n        const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n        return {\n          activeStepIndex,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload && index !== stepsTotal - 1) {\n              // current one but not last one\n              return {\n                state: StepState.completed,\n                label: step.label,\n              };\n            }\n            if (index === action.payload + 1) {\n              // next one\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      case 'setActive': {\n        return {\n          activeStepIndex: action.payload,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload) {\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      default:\n        throw new Error();\n    }\n  };\n  const reducer = commonReducer(5);\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div>\n      <Stepper\n        steps={state.steps}\n        language=\"en\"\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n`}</code></pre>\n    </Playground>\n    <h4 {...{\n      \"id\": \"small\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Small`}<a parentName=\"h4\" {...{\n        \"href\": \"#small\",\n        \"aria-label\": \"small permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <Playground mdxType=\"Playground\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\"\n        }}>{`{() => {\n  const commonReducer = (stepsTotal) => (state, action) => {\n    switch (action.type) {\n      case 'completeStep': {\n        const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n        return {\n          activeStepIndex,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload && index !== stepsTotal - 1) {\n              // current one but not last one\n              return {\n                state: StepState.completed,\n                label: step.label,\n              };\n            }\n            if (index === action.payload + 1) {\n              // next one\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      case 'setActive': {\n        return {\n          activeStepIndex: action.payload,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload) {\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      default:\n        throw new Error();\n    }\n  };\n  const reducer = commonReducer(5);\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div \n      style={{\n        maxWidth: '480px'\n      }}\n    >\n      <Stepper\n        steps={state.steps}\n        language=\"en\"\n        small\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          height: '80px',\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n`}</code></pre>\n    </Playground>\n    <h4 {...{\n      \"id\": \"with-a-step-heading\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`With a step heading`}<a parentName=\"h4\" {...{\n        \"href\": \"#with-a-step-heading\",\n        \"aria-label\": \"with a step heading permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <Playground mdxType=\"Playground\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\"\n        }}>{`{() => {\n  const commonReducer = (stepsTotal) => (state, action) => {\n    switch (action.type) {\n      case 'completeStep': {\n        const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n        return {\n          activeStepIndex,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload && index !== stepsTotal - 1) {\n              // current one but not last one\n              return {\n                state: StepState.completed,\n                label: step.label,\n              };\n            }\n            if (index === action.payload + 1) {\n              // next one\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      case 'setActive': {\n        return {\n          activeStepIndex: action.payload,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload) {\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      default:\n        throw new Error();\n    }\n  };\n  const reducer = commonReducer(5);\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div>\n      <Stepper\n        steps={state.steps}\n        language=\"en\"\n        stepHeading\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          height: '80px',\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n`}</code></pre>\n    </Playground>\n    <h4 {...{\n      \"id\": \"overflow\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Overflow`}<a parentName=\"h4\" {...{\n        \"href\": \"#overflow\",\n        \"aria-label\": \"overflow permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <Playground mdxType=\"Playground\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\"\n        }}>{`{() => {\n  const commonReducer = (stepsTotal) => (state, action) => {\n    switch (action.type) {\n      case 'completeStep': {\n        const activeStepIndex = action.payload === stepsTotal - 1 ? stepsTotal - 1 : action.payload + 1;\n        return {\n          activeStepIndex,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload && index !== stepsTotal - 1) {\n              // current one but not last one\n              return {\n                state: StepState.completed,\n                label: step.label,\n              };\n            }\n            if (index === action.payload + 1) {\n              // next one\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      case 'setActive': {\n        return {\n          activeStepIndex: action.payload,\n          steps: state.steps.map((step, index) => {\n            if (index === action.payload) {\n              return {\n                state: StepState.available,\n                label: step.label,\n              };\n            }\n            return step;\n          }),\n        };\n      }\n      default:\n        throw new Error();\n    }\n  };\n  const reducer = commonReducer(5);\n  const initialState = {\n    activeStepIndex: 0,\n    steps: [\n      {\n        label: 'Step 1',\n        state: StepState.available,\n      },\n      {\n        label: 'Step 2',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 3',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 4 - longer text',\n        state: StepState.disabled,\n      },\n      {\n        label: 'Step 5',\n        state: StepState.disabled,\n      },\n    ],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const lastStep = state.activeStepIndex === state.steps.length - 1;\n  return (\n    <div \n      style={{\n        maxWidth: '400px'\n      }}\n    >\n      <Stepper\n        steps={state.steps}\n        language=\"en\"\n        selectedStep={state.activeStepIndex}\n        onStepClick={(event, stepIndex) => dispatch({ type: 'setActive', payload: stepIndex })}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-end',\n          gap: '24px',\n        }}\n      >\n        <Button\n          disabled={state.activeStepIndex === 0}\n          variant=\"secondary\"\n          onClick={() => dispatch({ type: 'setActive', payload: state.activeStepIndex - 1 })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconLeft={<IconArrowLeft />}\n        >\n          Previous\n        </Button>\n        <Button\n          variant={lastStep ? 'primary' : 'secondary'}\n          onClick={() => dispatch({ type: 'completeStep', payload: state.activeStepIndex })}\n          style={{ height: 'fit-content', width: 'fit-content' }}\n          iconRight={lastStep ? undefined : <IconArrowRight />}\n        >\n          {lastStep ? 'Send' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n}}\n`}</code></pre>\n    </Playground>\n    <h4 {...{\n      \"id\": \"step-states\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Step states`}<a parentName=\"h4\" {...{\n        \"href\": \"#step-states\",\n        \"aria-label\": \"step states permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <Playground mdxType=\"Playground\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\"\n        }}>{`<Stepper\n  language=\"en\"\n  onStepClick={function noRefCheck(){}}\n  selectedStep={1}\n  steps={[\n    {\n      label: 'Completed',\n      state: StepState.completed\n    },\n    {\n      label: 'Current',\n      state: StepState.available\n    },\n    {\n      label: 'Available',\n      state: StepState.available\n    },\n    {\n      label: 'Needs attention',\n      state: StepState.attention\n    },\n    {\n      label: 'Paused',\n      state: StepState.paused\n    },\n    {\n      label: 'Disabled',\n      state: StepState.disabled\n    }\n  ]}\n/>\n`}</code></pre>\n    </Playground>\n    <h3 {...{\n      \"id\": \"packages\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Packages`}<a parentName=\"h3\" {...{\n        \"href\": \"#packages\",\n        \"aria-label\": \"packages permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Package`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Included`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Storybook link`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Source link`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`HDS React`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><div style={{\n              display: 'flex',\n              gap: 'var(--spacing-3-xs)'\n            }}><IconCheckCircleFill mdxType=\"IconCheckCircleFill\" />{` Yes `}</div></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link openInNewTab openInNewTabAriaLabel=\"Opens in a new tab\" href=\"/storybook/react/?path=/story/components-stepper--default\" mdxType=\"Link\">{`View in Storybook`}</Link></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><ExternalLink openInNewTab openInNewTabAriaLabel=\"Opens in a new tab\" href=\"https://github.com/City-of-Helsinki/helsinki-design-system/tree/master/packages/react/src/components/stepper\" mdxType=\"ExternalLink\">{`View source`}</ExternalLink></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`HDS Core`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><div style={{\n              display: 'flex',\n              gap: 'var(--spacing-3-xs)'\n            }}><IconCrossCircle mdxType=\"IconCrossCircle\" />{` No `}</div></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"properties\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Properties`}<a parentName=\"h3\" {...{\n        \"href\": \"#properties\",\n        \"aria-label\": \"properties permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <p>{`Note! You can find the full list of properties in the `}<Link openInNewTab openInNewTabAriaLabel=\"Opens in a new tab\" href=\"/storybook/react/?path=/docs/components-stepper--default\" mdxType=\"Link\">{`React Storybook.`}</Link></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Values`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default value`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`headingClassName`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A custom class name for step heading.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`language`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The language of the stepper.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"fi\"`}</inlineCode>{` `}<inlineCode parentName=\"td\">{`\"sv\"`}</inlineCode>{` `}<inlineCode parentName=\"td\">{`\"en\"`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\"fi\"`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`onStepClick`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A callback function for custom action on step click.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`function`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`selectedStep`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The index of the selected step.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`small`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`If set to true, the small variant is used.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`stepHeading`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`If set to true, a step heading is shown below the stepper.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`stepHeadingAriaLevel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A step heading aria level.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`number`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`2`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`steps`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The steps of the stepper.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Steps`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`[Table 1:Stepper properties]`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","IconCheckCircleFill","IconCrossCircle","layoutProps","MDXLayout","children","pageContext","MDXContent","components","mdxType","parentName","style","display","gap","L","openInNewTab","openInNewTabAriaLabel","href","isMDXComponent"],"sourceRoot":""}