{"version":3,"file":"component---src-docs-elements-design-tokens-breakpoints-usage-mdx-de18fae62c2a64d593f6.js","mappings":"sQASaA,EAAe,CAC1B,KAAQ,4CACR,MAAS,6BAELC,EAAc,CAClBD,aAAAA,GAGIE,EAAY,SAAC,GAAD,IAChBC,EADgB,EAChBA,SADgB,OAEZ,wBAAGA,IAEM,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAE5E,4BACA,qKAAuJ,QAAC,EAAAC,EAAD,CAAMC,KAAK,IAAIC,KAAK,IAAIH,QAAQ,QAAhC,uBAAvJ,gEACA,iCACA,mBACE,cAAII,WAAW,MAAf,sLAA0M,QAAC,EAAAH,EAAD,CAAMC,KAAK,IAAIC,KAAK,2BAA2BH,QAAQ,QAAvD,mCAC1M,cAAII,WAAW,MAAf,oJACA,cAAIA,WAAW,MAAf,gGACA,cAAIA,WAAW,MAAf,+EAAmG,QAAC,EAAAH,EAAD,CAAMC,KAAK,IAAIC,KAAK,IAAIH,QAAQ,QAAhC,+BAAnG,oGAEF,oCACA,mBACE,cAAII,WAAW,MAAf,mLAAuM,QAAC,EAAAH,EAAD,CAAMC,KAAK,IAAIC,KAAK,0DAA0DE,UAAQ,EAACL,QAAQ,QAA/F,wCAAvM,OAEF,8CACA,sEACA,mBACE,cAAII,WAAW,OAAK,kBAAQA,WAAW,MAAnB,qBAApB,kFACA,cAAIA,WAAW,OAAK,kBAAQA,WAAW,MAAnB,0BAApB,yDAEF,kBAAG,kBAAQA,WAAW,KAAnB,iDAAH,yKAA6P,sBAAYA,WAAW,KAAvB,kBAA7P,+BAAsV,sBAAYA,WAAW,KAAvB,uBAAtV,YACA,kBAAG,kBAAQA,WAAW,KAAnB,uGAAH,8EAAwN,QAAC,EAAAH,EAAD,CAAMC,KAAK,IAAIC,KAAK,gFAAgFE,UAAQ,EAACL,QAAQ,QAArH,mCAAxN,SAAuY,QAAC,EAAAC,EAAD,CAAMC,KAAK,IAAIC,KAAK,+EAA+EE,UAAQ,EAACL,QAAQ,QAApH,kCAAvY,MAMJH,EAAWS,gBAAiB","sources":["webpack://hds-site/./src/docs/elements/design-tokens/breakpoints/usage.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Link } from 'hds-react';\nimport Playground from '../../../../components/Playground';\nexport const _frontmatter = {\n  \"slug\": \"/elements/design-tokens/breakpoints/usage\",\n  \"title\": \"Breakpoint tokens - Usage\"\n};\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <>{children}</>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Usage`}</h2>\n    <p>{`HDS includes tokenized values for both breakpoints and maximum container width in each breakpoint. Breakpoint tokens can be also used alongside `}<Link size=\"M\" href=\"#\" mdxType=\"Link\">{`HDS grid guidelines`}</Link>{` in order to create consistent designs and implementations.`}</p>\n    <h3>{`Principles`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Always use token of the same level for both the breakpoint and container width. This ensures consistency across all services using HDS breakpoint tokens. Read more about this in `}<Link size=\"M\" href=\"#using-breakpoint-tokens\" mdxType=\"Link\">{`the breakpoint usage section.`}</Link></li>\n      <li parentName=\"ul\">{`Aim to provide all breakpoints listed in HDS tokens in your service. This way you ensure your service is usable with every common screen width.`}</li>\n      <li parentName=\"ul\">{`For best results, test your designs and implementations at the edge of each HDS breakpoint.`}</li>\n      <li parentName=\"ul\">{`It is recommended to use scaling methods HDS suggests for each breakpoint (`}<Link size=\"M\" href=\"#\" mdxType=\"Link\">{`see Breakpoints token table`}</Link>{`). However, it is allowed to use different scaling methods if it works better for the service.`}</li>\n    </ul>\n    <h3>{`Accessibility`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`When testing your designs and implementation at different breakpoints, pay extra attention how your service behaves if browser zoom functionality is used. Read more about the `}<Link size=\"M\" href=\"https://www.w3.org/WAI/WCAG21/Understanding/reflow.html\" external mdxType=\"Link\">{`WCAG requirements considering reflow`}</Link>{`.`}</li>\n    </ul>\n    <h3>{`Using breakpoint tokens`}</h3>\n    <p>{`The breakpoint tokens are divided into two sets;`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Breakpoint tokens`}</strong>{` define exact widths (in pixels) where the next breakpoint comes into effect.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Container width tokens`}</strong>{` define maximum container width in each breakpoint.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Note how these two sets of tokens are linked.`}</strong>{` You are supposed pick and use tokens from same level depending on the screen width. For example, when screen width is above 767 pixels and below 992 pixels you use `}<inlineCode parentName=\"p\">{`--breakpoint-m`}</inlineCode>{` token in combination with `}<inlineCode parentName=\"p\">{`--container-width-m`}</inlineCode>{` token.`}</p>\n    <p><strong parentName=\"p\">{`HDS offers a Container component which follows breakpoint and container width tokens automatically.`}</strong>{` It is recommended to use it if possible. For more info and examples, see `}<Link size=\"M\" href=\"https://hds.hel.fi/storybook/react/?path=/story/components-container--example\" external mdxType=\"Link\">{`Container - React documentation`}</Link>{` and `}<Link size=\"M\" href=\"https://hds.hel.fi/storybook/core/?path=/story/components-container--default\" external mdxType=\"Link\">{`Container - Core documentation`}</Link>{`.`}</p>\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","children","MDXContent","components","props","mdxType","L","size","href","parentName","external","isMDXComponent"],"sourceRoot":""}