{"version":3,"file":"component---src-docs-components-toggle-button-index-mdx-3875f37963b0da988d15.js","mappings":"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","sources":["webpack://site/./src/docs/components/toggle-button/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { ToggleButton } from 'hds-react';\nimport PlaygroundPreview from '../../../components/Playground';\nimport TabsLayout from './tabs.mdx';\nimport InternalLink from '../../../components/InternalLink';\nexport const ToggleExample = () => {\n  const [checked1, setChecked1] = React.useState(true);\n  return <ToggleButton id=\"toggle-button\" label=\"Label\" checked={checked1} onChange={() => setChecked1(!checked1)} mdxType=\"ToggleButton\" />;\n};\nexport const DefaultToggleExample = () => {\n  const [checked2, setChecked2] = React.useState(true);\n  return <ToggleButton id=\"toggle-button-default\" label=\"Label\" checked={checked2} onChange={() => setChecked2(!checked2)} mdxType=\"ToggleButton\" />;\n};\nexport const HorizontalToggleExample = () => {\n  const [checked2, setChecked2] = React.useState(true);\n  return <div style={{\n    maxWidth: '160px'\n  }}>\n      <ToggleButton id=\"toggle-button-horizontal\" label=\"Label\" variant=\"inline\" checked={checked2} onChange={() => setChecked2(!checked2)} mdxType=\"ToggleButton\" />\n    </div>;\n};\nexport const _frontmatter = {\n  \"slug\": \"/components/toggle-button\",\n  \"title\": \"ToggleButton\",\n  \"navTitle\": \"ToggleButton\"\n};\nconst layoutProps = {\n  ToggleExample,\n  DefaultToggleExample,\n  HorizontalToggleExample,\n  _frontmatter\n};\nconst MDXLayout = ({\n  children,\n  pageContext\n}) => <TabsLayout pageContext={pageContext}>{children}</TabsLayout>;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"usage\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Usage`}<a parentName=\"h2\" {...{\n        \"href\": \"#usage\",\n        \"aria-label\": \"usage permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h2>\n    <h3 {...{\n      \"id\": \"example\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Example`}<a parentName=\"h3\" {...{\n        \"href\": \"#example\",\n        \"aria-label\": \"example permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n\n    <PlaygroundPreview mdxType=\"PlaygroundPreview\">\n  <ToggleExample mdxType=\"ToggleExample\" />\n    </PlaygroundPreview>\n    <h3 {...{\n      \"id\": \"principles\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Principles`}<a parentName=\"h3\" {...{\n        \"href\": \"#principles\",\n        \"aria-label\": \"principles permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`A label should always be provided with a toggle button.`}</strong>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Make sure that the label is clear and concise. A good toggle button label describes the effect that will happen when the toggle button is set to \"On\" position.`}</li>\n          <li parentName=\"ul\">{`For example, use the label \"`}<em parentName=\"li\">{`Allow notifications`}</em>{`\" instead of \"`}<em parentName=\"li\">{`Do you want to receive notifications?`}</em>{`\".`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`The toggle button should have an immediate effect when activated.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Toggle buttons have been inspired by real-world physical switches (e.g. a light switch). Therefore users expect something to happen immediately when the toggle button is activated.`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`Also, avoid using toggle buttons if the effect requires an asynchronous call.`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">{`Toggle buttons must not be used in forms that require pressing a submit button in order to the selection come into effect - unless they have an immediate effect inside the form.`}</li>\n          <li parentName=\"ul\">{`If your toggle button does not have an immediate effect, use a single `}<InternalLink href=\"/components/checkbox\" mdxType=\"InternalLink\">{`Checkbox component`}</InternalLink>{` instead. Also see `}<InternalLink href=\"/foundation/guidelines/checkbox-radiobutton-toggle\" mdxType=\"InternalLink\">{`guidelines for choosing between radiobuttons, checkboxes and toggles.`}</InternalLink></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Toggle button will always have a default option. Toggle buttons that do not have a state at all (neither \"On\" or \"Off\") must not be used.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"variations\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Variations`}<a parentName=\"h3\" {...{\n        \"href\": \"#variations\",\n        \"aria-label\": \"variations permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <h4 {...{\n      \"id\": \"default\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Default`}<a parentName=\"h4\" {...{\n        \"href\": \"#default\",\n        \"aria-label\": \"default permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <p>{`The default HDS toggle button variant includes a label above the toggle button familiar from other HDS form components.`}</p>\n\n    <PlaygroundPreview mdxType=\"PlaygroundPreview\">\n  <DefaultToggleExample mdxType=\"DefaultToggleExample\" />\n    </PlaygroundPreview>\n    <h4 {...{\n      \"id\": \"with-a-horizontal-label\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`With a horizontal label`}<a parentName=\"h4\" {...{\n        \"href\": \"#with-a-horizontal-label\",\n        \"aria-label\": \"with a horizontal label permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <p>{`The toggle button label can also be positioned horizontally. This alignment is often used on smaller screens (e.g. mobile phones) and tighter user interface spaces.`}</p>\n\n    <PlaygroundPreview mdxType=\"PlaygroundPreview\">\n  <HorizontalToggleExample mdxType=\"HorizontalToggleExample\" />\n    </PlaygroundPreview>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["ToggleExample","_React$useState","React","checked1","setChecked1","mdx","ToggleButton","id","label","checked","onChange","mdxType","DefaultToggleExample","_React$useState2","checked2","setChecked2","HorizontalToggleExample","_React$useState3","style","maxWidth","variant","_frontmatter","layoutProps","MDXLayout","_ref","children","pageContext","TabsLayout","MDXContent","_ref2","components","props","_objectWithoutPropertiesLoose","_excluded","Object","assign","parentName","PlaygroundPreview","InternalLink","href","isMDXComponent"],"sourceRoot":""}