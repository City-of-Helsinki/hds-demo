{"version":3,"file":"component---src-docs-elements-components-loading-spinner-index-mdx-88ae4a9c7249b81c42bb.js","mappings":"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","sources":["webpack://hds-site/./src/docs/elements/components/loading-spinner/accessibility.mdx","webpack://hds-site/./src/docs/elements/components/loading-spinner/code.mdx","webpack://hds-site/./src/docs/elements/components/loading-spinner/customisation.mdx","webpack://hds-site/./src/docs/elements/components/loading-spinner/index.mdx","webpack://hds-site/./src/docs/elements/components/loading-spinner/usage.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"slug\": \"/elements/components/loading-spinner/accessibility\",\n  \"title\": \"LoadingSpinner - Accessibility\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <>{children}</>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Accessibility`}</h2>\n    <h3>{`Pay attention to`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`The colour contrast between the loading spinner and its background must comply with `}<Link href=\"https://www.w3.org/TR/WCAG21/#contrast-minimum\" external mdxType=\"Link\">{`AA Level contrast ratios`}</Link>{`. You can find more information about accessible colour combinations in `}<a parentName=\"li\" {...{\n          \"href\": \"/hds-demo/docsite-feedback-v1/design-tokens/colour\"\n        }}>{`Colour design token documentation`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`Multiple simultaneous loading spinners can be very confusing for assistive technologies. `}<strong parentName=\"li\">{`HDS Loading spinner React component is built in a way that only reads one alert for screen readers`}</strong>{` - even if there were multiple on the screen. If you are unable to use this feature or it fits your needs poorly (e.g. your project does not use JavaScript), please consider using only one spinner at a time and giving that one spinner the most accurate possible description.`}</li>\n      <li parentName=\"ul\">{`HDS Loading spinner must be given labels to describe the loading event. Use `}<inlineCode parentName=\"li\">{`loadingText`}</inlineCode>{` prop for description for loading and `}<inlineCode parentName=\"li\">{`loadingFinishedText`}</inlineCode>{` prop for description for loading finishing.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Descriptions should not be too detailed. You should use generic descriptions such as \"`}<em parentName=\"li\">{`The page content is loading`}</em>{`\" and \"`}<em parentName=\"li\">{`The page content loading was finished`}</em>{`\".`}</li>\n          <li parentName=\"ul\">{`If there are multiple spinners on the screen, they all must have identical descriptions. Remember that the description is read to screen readers only once.`}</li>\n          <li parentName=\"ul\">{`If the spinner also has a visual label, it can be hidden from assistive technologies to avoid description to be read twice.`}</li>\n        </ul>\n      </li>\n    </ul>\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Link } from 'hds-react';\nexport const _frontmatter = {\n  \"slug\": \"/elements/components/loading-spinner/code\",\n  \"title\": \"LoadingSpinner - Code\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Playground = makeShortcode(\"Playground\");\nconst IconCheckCircleFill = makeShortcode(\"IconCheckCircleFill\");\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <>{children}</>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Code`}</h2>\n    <h3>{`Code examples`}</h3>\n    <h4>{`Default`}</h4>\n    <Playground mdxType=\"Playground\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\"\n        }}>{`<>\n<LoadingSpinner />\n<br />\n<LoadingSpinner small />\n</>\n`}</code></pre>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-html\"\n        }}>{`<div>\n  <div class=\"hds-loading-spinner\">\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n\n  <div class=\"hds-loading-spinner hds-loading-spinner--small\">\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n</div>\n`}</code></pre>\n    </Playground>\n    <h3>{`Packages`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Package`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Included`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Storybook link`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Source link`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`HDS React`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><IconCheckCircleFill mdxType=\"IconCheckCircleFill\" />{` Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link size=\"M\" external href=\"/storybook/react/?path=/story/components-loadingspinner--default\" mdxType=\"Link\">{`View in Storybook`}</Link></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link size=\"M\" external href=\"https://github.com/City-of-Helsinki/helsinki-design-system/tree/master/packages/react/src/components/loadingSpinner\" mdxType=\"Link\">{`View source`}</Link></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`HDS Core`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><IconCheckCircleFill mdxType=\"IconCheckCircleFill\" />{` Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link size=\"M\" external href=\"/storybook/core/?path=/story/components-loading-spinner--default\" mdxType=\"Link\">{`View in Storybook`}</Link></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><Link size=\"M\" external href=\"https://github.com/City-of-Helsinki/helsinki-design-system/tree/master/packages/core/src/components/loading-spinner\" mdxType=\"Link\">{`View source`}</Link></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3>{`Properties`}</h3>\n    <p>{`Note! You can find the full list of properties in the `}<Link size=\"M\" href=\"/storybook/react/?path=/story/components-loadingspinner--default\" external mdxType=\"Link\">{`React Storybook.`}</Link></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Values`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default value`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`multicolor`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`If set to true, the multicolour variant is used.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`small`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`If set to true, the small variant is used.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`loadingText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Text to show for screen readers when spinner is visible.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"Page is loading\"`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`loadingFinishedText`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Text to show for screen readers when spinner is removed.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"Page has finished loading\"`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"slug\": \"/elements/components/loading-spinner/customisation\",\n  \"title\": \"LoadingSpinner - Customisation\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Playground = makeShortcode(\"Playground\");\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <>{children}</>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Customisation`}</h2>\n    <h3>{`Customisation properties`}</h3>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` property to customise the component. See all available theme variables in the table below.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Theme variable`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--spinner-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Spinner colour`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--spinner-color-stage1`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The first spinner colour (when the `}<inlineCode parentName=\"td\">{`multicolor`}</inlineCode>{` is set to true)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--spinner-color-stage2`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The first spinner colour (when the `}<inlineCode parentName=\"td\">{`multicolor`}</inlineCode>{` is set to true)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--spinner-color-stage3`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The first spinner colour (when the `}<inlineCode parentName=\"td\">{`multicolor`}</inlineCode>{` is set to true)`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3>{`Customisation example`}</h3>\n    <Playground mdxType=\"Playground\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\"\n        }}>{`<>\n<LoadingSpinner\n  theme={{\n    '--spinner-color': 'var(--color-tram)',\n  }}\n/>\n<br />\n<LoadingSpinner\n  multicolor\n  theme={{\n    '--spinner-color-stage1': 'var(--color-coat-of-arms)',\n    '--spinner-color-stage2': 'var(--color-tram)',\n    '--spinner-color-stage3': 'var(--color-metro)'\n  }}\n/>\n</>\n`}</code></pre>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-html\"\n        }}>{`<div>\n  <style>\n    .hds-loading-spinner.custom-single-color {\n      --spinner-color: var(--color-tram);\n    }\n  </style>\n  <div class=\"hds-loading-spinner custom-single-color\">\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n\n  <style>\n    .hds-loading-spinner.custom-multi-color {\n      --spinner-color-stage1: var(--color-coat-of-arms);\n      --spinner-color-stage2: var(--color-tram);\n      --spinner-color-stage3: var(--color-metro);\n    }\n  </style>\n  <div class=\"hds-loading-spinner hds-loading-spinner--multicolor custom-multi-color\">\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n</div>\n`}</code></pre>\n    </Playground>\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/roni.jaakkola/Documents/local_projects/helsinki-design-system/new-site/src/components/layout.js\";\nimport { StatusLabel, Tabs } from 'hds-react';\nimport LeadParagraph from '../../../../components/LeadParagraph';\nimport Playground from '../../../../components/Playground';\nimport Accessibility from './accessibility.mdx';\nimport Code from './code.mdx';\nimport Customisation from './customisation.mdx';\nimport Usage from './usage.mdx';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1>{`LoadingSpinner`}</h1>\n    <StatusLabel type=\"info\" mdxType=\"StatusLabel\">Stable</StatusLabel>\n    <StatusLabel type=\"success\" style={{\n      marginLeft: 'var(--spacing-xs)'\n    }} mdxType=\"StatusLabel\">\n  Accessible\n    </StatusLabel>\n    <LeadParagraph mdxType=\"LeadParagraph\">\n  Loading spinner is used for notifying users that their action is being processed or data retrieved from server.\n    </LeadParagraph>\n    <Tabs mdxType=\"Tabs\">\n  <Tabs.TabList className=\"pageTabsList\">\n    <Tabs.Tab>Usage</Tabs.Tab>\n    <Tabs.Tab>Code</Tabs.Tab>\n    <Tabs.Tab>Accessibility</Tabs.Tab>\n    <Tabs.Tab>Customisation</Tabs.Tab>\n  </Tabs.TabList>\n  <Tabs.TabPanel>\n    <Usage mdxType=\"Usage\" />\n  </Tabs.TabPanel>\n  <Tabs.TabPanel>\n    <Code mdxType=\"Code\" />\n  </Tabs.TabPanel>\n  <Tabs.TabPanel>\n    <Accessibility mdxType=\"Accessibility\" />\n  </Tabs.TabPanel>\n  <Tabs.TabPanel>\n    <Customisation mdxType=\"Customisation\" />\n  </Tabs.TabPanel>\n    </Tabs>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { LoadingSpinner } from 'hds-react';\nimport { Link } from 'hds-react';\nexport const _frontmatter = {\n  \"slug\": \"/elements/components/loading-spinner/code\",\n  \"title\": \"LoadingSpinner - Usage\"\n};\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <>{children}</>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Usage`}</h2>\n    <h3>{`Example`}</h3>\n    <LoadingSpinner mdxType=\"LoadingSpinner\" />\n    <p>{`The loading spinner do not provide details about nature of the processing but it reassures the user that their action is being processed.`}</p>\n    <h3>{`Principles`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Use the loading spinner only if the wait time is anticipated to be longer than three seconds.`}</strong>{` A spinner that only quickly flashes in view can confuse the user.`}</li>\n      <li parentName=\"ul\">{`Display the loading spinner in the same area and contextual level where the processing is taking place. For example, if only the loader indicates that data is being retrieved for a specific content area, display the spinner in that same area.`}</li>\n      <li parentName=\"ul\">{`If possible, provide a descriptive visual label for the action being processed with the loading spinner.`}</li>\n    </ul>\n    <h3>{`Variations`}</h3>\n    <h4>{`Default`}</h4>\n    <p>{`The loading spinner comes in two sizes: `}</p>\n    <ul>\n      <li parentName=\"ul\">{`Medium (64px) is used for larger content areas and for full-screen loading `}</li>\n      <li parentName=\"ul\">{`Small (24px) can be used for indicating more local changes in content.`}</li>\n    </ul>\n    <>\n  <LoadingSpinner mdxType=\"LoadingSpinner\" />\n  <br />\n  <LoadingSpinner small mdxType=\"LoadingSpinner\" />\n    </>\n    <hr></hr>\n    <h4>{`Customized loading spinner`}</h4>\n    <p>{`The colour of the spinner can be customised to fit the colour theme of the service. HDS Loading spinner even supports shifting between multiple colours. Colour shifting should be used sparingly and only if the theme of the service calls for it.`}</p>\n    <p>{`Note! When using multicolour loading spinners, at least half of the colours must have sufficient contrast `}<inlineCode parentName=\"p\">{`3:1`}</inlineCode>{` against the spinner background.`}</p>\n    <>\n      <LoadingSpinner theme={{\n        '--spinner-color': 'var(--color-tram)'\n      }} mdxType=\"LoadingSpinner\" />\n  <br />\n      <LoadingSpinner multicolor theme={{\n        '--spinner-color-stage1': 'var(--color-coat-of-arms)',\n        '--spinner-color-stage2': 'var(--color-tram)',\n        '--spinner-color-stage3': 'var(--color-metro)'\n      }} mdxType=\"LoadingSpinner\" />\n    </>\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Link","props","console","warn","layoutProps","MDXLayout","children","MDXContent","components","mdxType","parentName","href","external","isMDXComponent","makeShortcode","Playground","IconCheckCircleFill","L","size","DefaultLayout","S","type","style","marginLeft","className","Tab","small","theme","multicolor"],"sourceRoot":""}