{"version":3,"file":"component---src-docs-elements-components-link-accessibility-mdx-5596b08959dcbbf39d84.js","mappings":"+OAOaA,EAAe,CAC1B,KAAQ,0CACR,MAAS,wBAELC,EAAc,CAClBD,aAAAA,GAGIE,EAAY,SAAC,GAAD,IAChBC,EADgB,EAChBA,SADgB,OAEZ,wBAAGA,IAEM,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAC5E,oCACA,uCACA,yMACA,mBACE,cAAIC,WAAW,OACb,aAAGA,WAAW,MAAd,sJAAyK,sBAAYA,WAAW,KAAvB,YAAzK,8FAA2T,sBAAYA,WAAW,KAAvB,iCAA3T,sCACoB,sBAAYA,WAAW,KAAvB,cADpB,wDAGF,cAAIA,WAAW,OACb,aAAGA,WAAW,MAAd,8HAAiJ,sBAAYA,WAAW,KAAvB,gBAAjJ,6FAAsS,sBAAYA,WAAW,KAAvB,yBAAtS,sCACoB,sBAAYA,WAAW,KAAvB,cADpB,wDAGF,cAAIA,WAAW,OACb,aAAGA,WAAW,MAAd,2UAGJ,qCACA,mBACE,cAAIA,WAAW,MAAf,gKACA,cAAIA,WAAW,MAAf,6HACA,cAAIA,WAAW,MAAf,wGACA,cAAIA,WAAW,MAAf,0JACA,cAAIA,WAAW,MAAf,6DAONJ,EAAWK,gBAAiB","sources":["webpack://hds-site/./src/docs/elements/components/link/accessibility.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"slug\": \"/elements/components/link/accessibility\",\n  \"title\": \"Link - Accessibility\"\n};\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <>{children}</>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Accessibility`}</h2>\n    <h3>{`Pay attention to`}</h3>\n    <p>{`The HDS link component is primarily a native HTML hyperlink navigational element. The Enter key activates the link and causes the user agent to move focus to the link destination.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Remember to tell users if the link is going to open an entirely new site. In HDS React Link this feature is provided through external links (prop `}<inlineCode parentName=\"p\">{`external`}</inlineCode>{`). There is a default aria-label for screen readers. This can be overwritten by using the `}<inlineCode parentName=\"p\">{`openInExternalDomainAriaLabel`}</inlineCode>{` prop.\nIn HDS Core, set a proper `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` to the anchor tag as shown in the examples below.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Remember to tell users if the link is going to open in a new tab. In HDS React Link this feature is provided through prop `}<inlineCode parentName=\"p\">{`openInNewTab`}</inlineCode>{`. There is a default aria-label for screen readers. This can be overwritten by using the `}<inlineCode parentName=\"p\">{`openInNewTabAriaLabel`}</inlineCode>{` prop.\nIn HDS Core, set a proper `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` to the anchor tag as shown in the examples below.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Some assistive technologies provide a list of all links on the page to its user. If the text of the links does not clearly give the purpose, or if multiple links with the same name point to different targets (e.g., “read more”), users are forced to locate the link on the page and search surrounding information for context.`}</p>\n      </li>\n    </ul>\n    <p>{`Make sure that:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Link text is the visible label for the native HTML link and is used to provide the purpose of the link which is clear and easy to understand for all users.`}</li>\n      <li parentName=\"ul\">{`The alt attribute for the img element is used to describe the purpose of a graphical link with an image inside the link.`}</li>\n      <li parentName=\"ul\">{`The title attribute can be used to supplement the link text with any additional useful description.`}</li>\n      <li parentName=\"ul\">{`The purpose of each link can be determined from the link text alone or from the link text together with its programmatically determined link context.`}</li>\n      <li parentName=\"ul\">{`Icons should always be the same colour as the link text`}</li>\n    </ul>\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","children","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}