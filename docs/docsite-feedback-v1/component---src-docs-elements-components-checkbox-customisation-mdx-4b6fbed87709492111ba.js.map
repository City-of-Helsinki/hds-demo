{"version":3,"file":"component---src-docs-elements-components-checkbox-customisation-mdx-4b6fbed87709492111ba.js","mappings":"8LAcsBA,E,6DALTC,EAAe,CAC1B,KAAQ,8CACR,MAAS,4BAQLC,GALgBF,EAKW,aALH,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,cAASG,KAIZG,EAAc,CAClBL,aAAAA,GAGIM,EAAY,SAAC,GAAD,IAChBC,EADgB,EAChBA,SADgB,OAEZ,wBAAGA,IAEM,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,QAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAE5E,oCACA,QAAC,EAAAC,EAAD,CAAcC,KAAK,QAAQC,MAAM,4CAA4CC,UAAU,mBAAmBJ,QAAQ,gBAAlH,kHAC4G,6BAD5G,mCAC6J,6BAD7J,sDAGA,+CACA,qCAAuB,sBAAYK,WAAW,KAAvB,SAAvB,gGACA,sBACE,iBAAOA,WAAW,UAChB,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,MADX,mBAGA,cAAIA,WAAW,KACb,MAAS,MADX,kBAKJ,iBAAOA,WAAW,UAChB,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,YACH,cAAIA,WAAW,KACb,MAAS,MADX,0BAIF,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,kBACH,cAAIA,WAAW,KACb,MAAS,MADX,sCAIF,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,oBACH,cAAIA,WAAW,KACb,MAAS,MADX,kCAIF,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,qBACH,cAAIA,WAAW,KACb,MAAS,MADX,wCAIF,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,2BACH,cAAIA,WAAW,KACb,MAAS,MADX,qDAIF,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,wBACH,cAAIA,WAAW,KACb,MAAS,MADX,oDAIF,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,6BACH,cAAIA,WAAW,KACb,MAAS,MADX,iDAIF,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,mCACH,cAAIA,WAAW,KACb,MAAS,MADX,6DAIF,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,mCACH,cAAIA,WAAW,KACb,MAAS,MADX,6DAIF,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAvB,2BACH,cAAIA,WAAW,KACb,MAAS,MADX,2CAMN,4CACA,QAACd,EAAD,CAAYS,QAAQ,eAClB,oBAAK,gBAAMK,WAAW,MAClB,UAAa,gBADZ,0wBAmCXP,EAAWQ,gBAAiB","sources":["webpack://hds-site/./src/docs/elements/components/checkbox/customisation.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Card, Link, Notification } from 'hds-react';\nimport { IconArrowRight } from 'hds-react';\nexport const _frontmatter = {\n  \"slug\": \"/elements/components/checkbox/customisation\",\n  \"title\": \"Checkbox - Customisation\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Playground = makeShortcode(\"Playground\");\nconst layoutProps = {\n  _frontmatter\n};\n\nconst MDXLayout = ({\n  children\n}) => <>{children}</>;\n\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Customisation`}</h2>\n    <Notification type=\"alert\" label=\"Checkbox customisation works differently!\" className=\"siteNotification\" mdxType=\"Notification\">\n  Checkbox is an older HDS component and therefore its customisation works slightly differently. Instead of the <code>theme</code> property, you need to use the <code>style</code> property. This will be fixed in a future update.\n    </Notification>\n    <h3>{`Customisation properties`}</h3>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` property to customise the component. See all available theme variables in the table below.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Theme variable`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--size`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Size of the checkbox`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--icon-scale`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Scale of the checkbox check icon`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--border-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Width of the checkbox border`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--outline-width`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Width of the checkbox focus border`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--background-selected`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Colour of the checkbox background when selected`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--background-hover`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Colour of the checkbox background when hovered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--border-color-selected`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Colour of the checkbox border when selected`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--border-color-selected-hover`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Colour of the checkbox border when selected and hovered`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--border-color-selected-focus`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Colour of the checkbox border when selected and focused`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--focus-outline-color`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Colour of the checkbox focus border`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3>{`Customisation example`}</h3>\n    <Playground mdxType=\"Playground\">\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-jsx\"\n        }}>{`{() => {\n  const [checked, setChecked] = useState(false);\n  const customStyles = {\n    '--size': '40px',\n    '--icon-scale': 0.6,\n    '--border-width': '3px',\n    '--outline-width': '4px',\n    '--background-selected': 'var(--color-success)',\n    '--background-hover': 'var(--color-success-dark)',\n    '--border-color-selected': 'var(--color-success)',\n    '--border-color-selected-hover': 'var(--color-success-dark)',\n    '--border-color-selected-focus': 'var(--color-success)',\n    '--focus-outline-color': 'var(--color-black-20)',\n  }\n  as\n  React.CSSProperties;\n  return (\n    <Checkbox\n      id=\"checkbox5\"\n      label=\"Label\"\n      style={customStyles}\n      checked={checked}\n      onChange={() => setChecked(!checked)}\n    />\n  );\n}}\n`}</code></pre>\n    </Playground>\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Playground","props","console","warn","layoutProps","MDXLayout","children","MDXContent","components","mdxType","N","type","label","className","parentName","isMDXComponent"],"sourceRoot":""}