{"version":3,"file":"component---src-docs-components-dialog-index-mdx-3c2fa8b51e0ea51bab4f.js","mappings":"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","sources":["webpack://site/./src/docs/components/dialog/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Dialog, Button, IconInfoCircle, IconTrash } from 'hds-react';\nimport PlaygroundPreview from '../../../components/Playground';\nimport TabsLayout from './tabs.mdx';\nimport InternalLink from '../../../components/InternalLink';\nexport const DialogExample = () => {\n  const dialogTargetRef = React.useRef(null); // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openInfoDialogButtonRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const close = () => setIsOpen(false);\n  const titleId = 'info-dialog-title';\n  const descriptionId = 'info-dialog-content';\n  return <>\n      <div ref={dialogTargetRef} />\n      <Button ref={openInfoDialogButtonRef} onClick={() => setIsOpen(true)} mdxType=\"Button\">\n        Open Info dialog\n      </Button>\n      <Dialog id=\"info-dialog\" aria-labelledby={titleId} aria-describedby={descriptionId} isOpen={isOpen} close={close} closeButtonLabelText=\"Close info dialog\" focusAfterCloseRef={openInfoDialogButtonRef} targetElement={dialogTargetRef.current} mdxType=\"Dialog\">\n        <Dialog.Header id={titleId} title=\"Terms of service have changed\" iconLeft={<IconInfoCircle aria-hidden=\"true\" mdxType=\"IconInfoCircle\" />} />\n        <Dialog.Content>\n          <p id={descriptionId} className=\"text-body\">\n            Please note that the terms of this service have changed. You can review the changes in the user settings.\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close} mdxType=\"Button\">Close</Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>;\n};\nexport const InfoDialogExample = () => {\n  const openInfoDialogButtonRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const close = () => setIsOpen(false);\n  const titleId = 'info-dialog-title';\n  const descriptionId = 'info-dialog-content';\n  return <>\n      <Button ref={openInfoDialogButtonRef} onClick={() => setIsOpen(true)} mdxType=\"Button\">\n        Open Info dialog\n      </Button>\n      <Dialog id=\"info-dialog\" aria-labelledby={titleId} aria-describedby={descriptionId} isOpen={isOpen} close={close} closeButtonLabelText=\"Close info dialog\" focusAfterCloseRef={openInfoDialogButtonRef} mdxType=\"Dialog\">\n        <Dialog.Header id={titleId} title=\"Terms of service have changed\" iconLeft={<IconInfoCircle aria-hidden=\"true\" mdxType=\"IconInfoCircle\" />} />\n        <Dialog.Content>\n          <p id={descriptionId} className=\"text-body\">\n            Please note that the terms of this service have changed. You can review the changes in the user settings.\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close} mdxType=\"Button\">Close</Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>;\n};\nexport const ConfirmDialogExample = () => {\n  const openConfirmationDialogButtonRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const close = () => setIsOpen(false);\n  const titleId = 'confirmation-dialog-title';\n  const descriptionId = 'confirmation-dialog-info';\n  return <>\n      <Button ref={openConfirmationDialogButtonRef} onClick={() => setIsOpen(true)} mdxType=\"Button\">\n        Open Confirmation dialog\n      </Button>\n      <Dialog id=\"confirmation-dialog\" aria-labelledby={titleId} aria-describedby={descriptionId} isOpen={isOpen} focusAfterCloseRef={openConfirmationDialogButtonRef} mdxType=\"Dialog\">\n        <Dialog.Header id={titleId} title=\"Are you sure you want to continue?\" iconLeft={<IconQuestionCircle aria-hidden=\"true\" mdxType=\"IconQuestionCircle\" />} />\n        <Dialog.Content>\n          <p id={descriptionId} className=\"text-body\">\n            You have not filled all form fields. Do you still want to continue? You can later return to edit this form.\n            Saved forms can be accessed in your personal profile.\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close} mdxType=\"Button\">Continue</Button>\n          <Button onClick={close} variant=\"secondary\" mdxType=\"Button\">\n            Cancel\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>;\n};\nexport const DangerDialogExample = () => {\n  const openDeleteDialogButtonRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const close = () => setIsOpen(false);\n  const titleId = 'delete-dialog-title';\n  const descriptionId = 'delete-dialog-info';\n  return <>\n      <Button ref={openDeleteDialogButtonRef} onClick={() => setIsOpen(true)} mdxType=\"Button\">\n        Open Delete dialog\n      </Button>\n      <Dialog variant=\"danger\" id=\"delete-dialog\" aria-labelledby={titleId} aria-describedby={descriptionId} isOpen={isOpen} focusAfterCloseRef={openDeleteDialogButtonRef} mdxType=\"Dialog\">\n        <Dialog.Header id={titleId} title=\"Are you sure you want to delete this blog post?\" iconLeft={<IconAlertCircle aria-hidden=\"true\" mdxType=\"IconAlertCircle\" />} />\n        <Dialog.Content>\n          <p id={descriptionId} className=\"text-body\">\n            The blog post will be deleted immediately. Deletion is permanent and it cannot be reverted.\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close} theme=\"black\" variant=\"secondary\" mdxType=\"Button\">\n            Cancel\n          </Button>\n          <Button variant=\"danger\" iconLeft={<IconTrash aria-hidden=\"true\" mdxType=\"IconTrash\" />} onClick={() => {\n          // Add confirm operations here\n          close();\n        }} mdxType=\"Button\">\n            Delete the blog post\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>;\n};\nexport const ScrollableDialogExample = () => {\n  const termsDialogTargetRef = React.useRef(null); // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openTermsDialogButtonRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const close = () => setIsOpen(false);\n  const titleId = 'terms-dialog-title';\n  const descriptionId = 'terms-dialog-info';\n  return <>\n      <div ref={termsDialogTargetRef} />\n      <Button ref={openTermsDialogButtonRef} onClick={() => setIsOpen(true)} mdxType=\"Button\">\n        Open Terms dialog\n      </Button>\n      <Dialog id=\"terms-dialog\" aria-labelledby={titleId} aria-describedby={descriptionId} isOpen={isOpen} focusAfterCloseRef={openTermsDialogButtonRef} targetElement={termsDialogTargetRef.current} scrollable mdxType=\"Dialog\">\n        <Dialog.Header id={titleId} title=\"Do you accept the terms of service?\" iconLeft={<IconAlertCircle aria-hidden=\"true\" mdxType=\"IconAlertCircle\" />} />\n        <Dialog.Content>\n          <h3 id={descriptionId}>Terms of service</h3>\n          <p className=\"text-body\">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem\n            aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni\n            dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor\n            sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore\n            magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in\n            ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas\n            nulla pariatur?\n          </p>\n          <p className=\"text-body\">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem\n            aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni\n            dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor\n            sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore\n            magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in\n            ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas\n            nulla pariatur?\n          </p>\n          <p className=\"text-body\">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem\n            aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni\n            dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor\n            sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore\n            magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in\n            ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas\n            nulla pariatur?\n          </p>\n          <p className=\"text-body\">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem\n            aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni\n            dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor\n            sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore\n            magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in\n            ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas\n            nulla pariatur?\n          </p>\n          <p className=\"text-body\">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem\n            aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni\n            dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor\n            sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore\n            magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in\n            ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas\n            nulla pariatur?\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close} mdxType=\"Button\">Accept terms</Button>\n          <Button onClick={close} variant=\"secondary\" mdxType=\"Button\">\n            Cancel\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>;\n};\nexport const _frontmatter = {\n  \"slug\": \"/components/dialog\",\n  \"title\": \"Dialog\",\n  \"navTitle\": \"Dialog\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst IconQuestionCircle = makeShortcode(\"IconQuestionCircle\");\nconst IconAlertCircle = makeShortcode(\"IconAlertCircle\");\nconst layoutProps = {\n  DialogExample,\n  InfoDialogExample,\n  ConfirmDialogExample,\n  DangerDialogExample,\n  ScrollableDialogExample,\n  _frontmatter\n};\nconst MDXLayout = ({\n  children,\n  pageContext\n}) => <TabsLayout pageContext={pageContext}>{children}</TabsLayout>;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"usage\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Usage`}<a parentName=\"h2\" {...{\n        \"href\": \"#usage\",\n        \"aria-label\": \"usage permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h2>\n    <h3 {...{\n      \"id\": \"example\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Example`}<a parentName=\"h3\" {...{\n        \"href\": \"#example\",\n        \"aria-label\": \"example permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n\n    <PlaygroundPreview mdxType=\"PlaygroundPreview\">\n  <DialogExample mdxType=\"DialogExample\" />\n    </PlaygroundPreview>\n    <h3 {...{\n      \"id\": \"principles\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Principles`}<a parentName=\"h3\" {...{\n        \"href\": \"#principles\",\n        \"aria-label\": \"principles permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <ul>\n      <li parentName=\"ul\">{`Dialogs capture the browser focus and the user is forced to react to the dialog.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`To emphasize this, a dark screen overlay must be used to cover the view content behind the dialog element.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Dialogs are a very intrusive pattern and they should only be used when the immediate actions or focus from the user are needed.`}</strong></li>\n      <li parentName=\"ul\">{`Be careful when including a separate close (\"x\") icon in the dialog. If there are more than one action available in the dialog, it can be ambiguous for the user which action is triggered when the close icon is pressed.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Generally, it is a good practise to omit the close icon if the dialog has more than one action available.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`If your dialog contains form elements, follow `}<InternalLink href=\"/patterns/forms/form-building\" mdxType=\"InternalLink\">{`HDS form`}</InternalLink>{` and `}<InternalLink href=\"/patterns/forms/form-validation\" mdxType=\"InternalLink\">{`form validation patterns`}</InternalLink>{` similarly as you would in a regular forms.`}</li>\n      <li parentName=\"ul\">{`As dialogs always contain buttons, pay close attention that the button labels describe the action it is going to trigger. You can read more information about this in the `}<InternalLink href=\"/components/buttons\" mdxType=\"InternalLink\">{`HDS Button documentation page.`}</InternalLink>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Following the same guidelines as the HDS Form pattern, dialog action buttons are placed at the left side of the dialog and the primary action will be the first one from the left.`}</li>\n          <li parentName=\"ul\">{`If some of the actions are destructive or irreversible, the button order should be reversed so so that the destructive actions are last in the button list. See `}<a parentName=\"li\" {...{\n              \"href\": \"#danger-dialog\"\n            }}>{`Danger dialog example`}</a>{` for more information.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Opening a dialog should be always triggered by the user. Do not open dialogs without user action.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Also make sure that the dialog is related to the current context.`}</li>\n          <li parentName=\"ul\">{`It is not recommended to open dialogs on top of other dialogs. However, this is supported by HDS Dialogs if it is needed.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h4 {...{\n      \"id\": \"when-to-use-each-dialog-type\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`When to use each dialog type?`}<a parentName=\"h4\" {...{\n        \"href\": \"#when-to-use-each-dialog-type\",\n        \"aria-label\": \"when to use each dialog type permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`When to use it?`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Example`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#info-dialog\"\n            }}>{`Info`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Important information needs to be conveyed to the user. Only requires acknowledgment and no choices from the user.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Informing the user about changed terms of use.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#confirm-dialog\"\n            }}>{`Confirm`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`An action is required from the user.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Confirming that the user wants to continue even though all form fields are not filled.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"#danger-dialog\"\n            }}>{`Danger`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`An action is required from the user while `}<strong parentName=\"td\">{`the action results are destructive`}</strong>{`.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Confirming that the user wants to delete a blog post.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"variations\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Variations`}<a parentName=\"h3\" {...{\n        \"href\": \"#variations\",\n        \"aria-label\": \"variations permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <h4 {...{\n      \"id\": \"info-dialog\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Info dialog`}<a parentName=\"h4\" {...{\n        \"href\": \"#info-dialog\",\n        \"aria-label\": \"info dialog permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <p>{`Info dialogs are used to convey important information to the user. Info dialogs only include one button which the user can use to acknowledge the information.`}</p>\n\n    <PlaygroundPreview mdxType=\"PlaygroundPreview\">\n  <InfoDialogExample mdxType=\"InfoDialogExample\" />\n    </PlaygroundPreview>\n    <h4 {...{\n      \"id\": \"confirm-dialog\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Confirm dialog`}<a parentName=\"h4\" {...{\n        \"href\": \"#confirm-dialog\",\n        \"aria-label\": \"confirm dialog permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <p>{`Confirm dialogs are used when an action is required from the user. Confirm dialogs always include at least two actions; one primary action (e.g. Confirm) and one secondary action (e.g. Cancel). However, more than two actions are allowed if it is needed.`}</p>\n\n    <PlaygroundPreview mdxType=\"PlaygroundPreview\">\n  <ConfirmDialogExample mdxType=\"ConfirmDialogExample\" />\n    </PlaygroundPreview>\n    <h4 {...{\n      \"id\": \"danger-dialog\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Danger dialog`}<a parentName=\"h4\" {...{\n        \"href\": \"#danger-dialog\",\n        \"aria-label\": \"danger dialog permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <p>{`Danger dialog is a variant of a confirm dialog. They are used in similar use cases but Danger dialogs are meant for situations where the action user is going to choose may be destructive or otherwise irreversible or very critical. Danger dialog emphasizes this by using HDS error status colours. Also, it reverses the action button order so that the destructive action is last in the button list.`}</p>\n\n    <PlaygroundPreview mdxType=\"PlaygroundPreview\">\n  <DangerDialogExample mdxType=\"DangerDialogExample\" />\n    </PlaygroundPreview>\n    <h4 {...{\n      \"id\": \"scrollable-dialog\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Scrollable dialog`}<a parentName=\"h4\" {...{\n        \"href\": \"#scrollable-dialog\",\n        \"aria-label\": \"scrollable dialog permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <p>{`While not recommended, HDS supports scrollable dialogs if there is a large amount of content (e.g. terms of use). `}<strong parentName=\"p\">{`It is recommended to consider other options than a dialog to present the same data since it can be difficult for the user to form a clear understanding of the presented content.`}</strong></p>\n\n    <PlaygroundPreview mdxType=\"PlaygroundPreview\">\n  <ScrollableDialogExample mdxType=\"ScrollableDialogExample\" />\n    </PlaygroundPreview>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["DialogExample","dialogTargetRef","React","openInfoDialogButtonRef","isOpen","setIsOpen","close","titleId","descriptionId","mdx","ref","Button","onClick","mdxType","Dialog","id","closeButtonLabelText","focusAfterCloseRef","targetElement","current","Header","title","iconLeft","IconInfoCircle","Content","className","ActionButtons","InfoDialogExample","ConfirmDialogExample","openConfirmationDialogButtonRef","IconQuestionCircle","variant","DangerDialogExample","openDeleteDialogButtonRef","IconAlertCircle","theme","IconTrash","ScrollableDialogExample","termsDialogTargetRef","openTermsDialogButtonRef","scrollable","_frontmatter","makeShortcode","name","props","console","warn","layoutProps","MDXLayout","_ref","children","pageContext","TabsLayout","MDXContent","_ref2","components","_objectWithoutProperties","_excluded","Object","assign","parentName","PlaygroundPreview","InternalLink","href","isMDXComponent"],"sourceRoot":""}