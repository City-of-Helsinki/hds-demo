{"version":3,"file":"component---src-docs-components-toggle-button-index-mdx-aea4a6b937435c686621.js","mappings":"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","sources":["webpack://site/./src/docs/components/toggle-button/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { ToggleButton } from 'hds-react';\nimport PlaygroundPreview from '../../../components/Playground';\nimport TabsLayout from './tabs.mdx';\nimport InternalLink from '../../../components/InternalLink';\nexport const ToggleExample = () => {\n  const [checked1, setChecked1] = React.useState(true);\n  return <ToggleButton id=\"toggle-button\" label=\"Label\" checked={checked1} onChange={() => setChecked1(!checked1)} mdxType=\"ToggleButton\" />;\n};\nexport const DefaultToggleExample = () => {\n  const [checked2, setChecked2] = React.useState(true);\n  return <ToggleButton id=\"toggle-button-default\" label=\"Label\" checked={checked2} onChange={() => setChecked2(!checked2)} mdxType=\"ToggleButton\" />;\n};\nexport const HorizontalToggleExample = () => {\n  const [checked2, setChecked2] = React.useState(true);\n  return <div style={{\n    maxWidth: '160px'\n  }}>\n      <ToggleButton id=\"toggle-button-horizontal\" label=\"Label\" variant=\"inline\" checked={checked2} onChange={() => setChecked2(!checked2)} mdxType=\"ToggleButton\" />\n    </div>;\n};\nexport const _frontmatter = {\n  \"slug\": \"/components/toggle-button\",\n  \"title\": \"ToggleButton\",\n  \"navTitle\": \"ToggleButton\"\n};\nconst layoutProps = {\n  ToggleExample,\n  DefaultToggleExample,\n  HorizontalToggleExample,\n  _frontmatter\n};\nconst MDXLayout = ({\n  children,\n  pageContext\n}) => <TabsLayout pageContext={pageContext}>{children}</TabsLayout>;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"usage\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Usage`}<a parentName=\"h2\" {...{\n        \"href\": \"#usage\",\n        \"aria-label\": \"usage permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h2>\n    <h3 {...{\n      \"id\": \"example\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Example`}<a parentName=\"h3\" {...{\n        \"href\": \"#example\",\n        \"aria-label\": \"example permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n\n    <PlaygroundPreview mdxType=\"PlaygroundPreview\">\n  <ToggleExample mdxType=\"ToggleExample\" />\n    </PlaygroundPreview>\n    <h3 {...{\n      \"id\": \"principles\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Principles`}<a parentName=\"h3\" {...{\n        \"href\": \"#principles\",\n        \"aria-label\": \"principles permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`A label should always be provided with a toggle button.`}</strong>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Make sure that the label is clear and concise. A good toggle button label describes the effect that will happen when the toggle button is set to \"On\" position.`}</li>\n          <li parentName=\"ul\">{`For example, use the label \"`}<em parentName=\"li\">{`Allow notifications`}</em>{`\" instead of \"`}<em parentName=\"li\">{`Do you want to receive notifications?`}</em>{`\".`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`The toggle button should have an immediate effect when activated.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Toggle buttons have been inspired by real-world physical switches (e.g. a light switch). Therefore users expect something to happen immediately when the toggle button is activated.`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`Also, avoid using toggle buttons if the effect requires an asynchronous call.`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">{`Toggle buttons must not be used in forms that require pressing a submit button in order to the selection come into effect - unless they have an immediate effect inside the form.`}</li>\n          <li parentName=\"ul\">{`If your toggle button does not have an immediate effect, use a single `}<InternalLink href=\"/components/checkbox\" mdxType=\"InternalLink\">{`Checkbox component`}</InternalLink>{` instead. Also see `}<InternalLink href=\"/foundation/guidelines/checkbox-radiobutton-toggle\" mdxType=\"InternalLink\">{`guidelines for choosing between radiobuttons, checkboxes and toggles.`}</InternalLink></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Toggle button will always have a default option. Toggle buttons that do not have a state at all (neither \"On\" or \"Off\") must not be used.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"variations\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Variations`}<a parentName=\"h3\" {...{\n        \"href\": \"#variations\",\n        \"aria-label\": \"variations permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h3>\n    <h4 {...{\n      \"id\": \"default\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`Default`}<a parentName=\"h4\" {...{\n        \"href\": \"#default\",\n        \"aria-label\": \"default permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <p>{`The default HDS toggle button variant includes a label above the toggle button familiar from other HDS form components.`}</p>\n\n    <PlaygroundPreview mdxType=\"PlaygroundPreview\">\n  <DefaultToggleExample mdxType=\"DefaultToggleExample\" />\n    </PlaygroundPreview>\n    <h4 {...{\n      \"id\": \"with-a-horizontal-label\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}>{`With a horizontal label`}<a parentName=\"h4\" {...{\n        \"href\": \"#with-a-horizontal-label\",\n        \"aria-label\": \"with a horizontal label permalink\",\n        \"className\": \"header-anchor after\"\n      }}><span parentName=\"a\" {...{\n          \"className\": \"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs\",\n          \"aria-hidden\": \"true\",\n          \"style\": {\n            \"verticalAlign\": \"middle\"\n          }\n        }}></span></a></h4>\n    <p>{`The toggle button label can also be positioned horizontally. This alignment is often used on smaller screens (e.g. mobile phones) and tighter user interface spaces.`}</p>\n\n    <PlaygroundPreview mdxType=\"PlaygroundPreview\">\n  <HorizontalToggleExample mdxType=\"HorizontalToggleExample\" />\n    </PlaygroundPreview>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["ToggleExample","checked1","setChecked1","React","mdx","ToggleButton","id","label","checked","onChange","mdxType","DefaultToggleExample","checked2","setChecked2","HorizontalToggleExample","style","maxWidth","variant","_frontmatter","layoutProps","MDXLayout","_ref","children","pageContext","TabsLayout","MDXContent","_ref2","components","props","_objectWithoutProperties","_excluded","Object","assign","parentName","PlaygroundPreview","InternalLink","href","isMDXComponent"],"sourceRoot":""}