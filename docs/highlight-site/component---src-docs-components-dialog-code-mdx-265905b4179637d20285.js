"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4393],{74082:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return d},default:function(){return f}});var a=n(63366),i=(n(67294),n(64983)),o=n(16839),l=n(80699),r=n(9460),s=n(54329),u=["components"],d={slug:"/components/dialog/code",title:"Dialog - Code"},c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},m=c("IconCheckCircleFill"),p=c("IconCrossCircle"),g={_frontmatter:d},h=function(e){var t=e.children,n=e.pageContext;return(0,i.kt)(s.default,{pageContext:n},t)};function f(e){var t=e.components,n=(0,a.Z)(e,u);return(0,i.kt)(h,Object.assign({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"code",style:{position:"relative"}},"Code",(0,i.kt)("a",{parentName:"h2",href:"#code","aria-label":"code permalink",className:"header-anchor after"},(0,i.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,i.kt)("h3",{id:"code-examples",style:{position:"relative"}},"Code examples",(0,i.kt)("a",{parentName:"h3",href:"#code-examples","aria-label":"code examples permalink",className:"header-anchor after"},(0,i.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,i.kt)("h4",{id:"info-dialog",style:{position:"relative"}},"Info dialog",(0,i.kt)("a",{parentName:"h4",href:"#info-dialog","aria-label":"info dialog permalink",className:"header-anchor after"},(0,i.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,i.kt)(r.ZP,{mdxType:"Playground"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Dialog, Button } from \'hds-react\';\n\n() => {\n  const dialogTargetRef = React.useRef(null); // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openInfoDialogButtonRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const close = () => setIsOpen(false);\n  const titleId = "info-dialog-title";\n  const descriptionId = "info-dialog-content";\n  return (\n    <>\n      <div ref={dialogTargetRef}/>\n      <Button ref={openInfoDialogButtonRef} onClick={() => setIsOpen(true)}>\n        Open Info dialog\n      </Button>\n      <Dialog\n        id="info-dialog"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n        isOpen={isOpen}\n        close={close}\n        closeButtonLabelText="Close info dialog"\n        focusAfterCloseRef={openInfoDialogButtonRef}\n        targetElement={dialogTargetRef.current}\n      >\n        <Dialog.Header\n          id={titleId}\n          title="Terms of service have changed"\n          iconLeft={<IconInfoCircle aria-hidden="true" />}\n        />\n        <Dialog.Content>\n          <p id={descriptionId} className="text-body">\n            Please note that the terms of this service have changed. You can review the changes in the user settings.</p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close}>\n            Close\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>\n  )\n}\n'))),(0,i.kt)("h3",{id:"confirm-dialog",style:{position:"relative"}},"Confirm dialog",(0,i.kt)("a",{parentName:"h3",href:"#confirm-dialog","aria-label":"confirm dialog permalink",className:"header-anchor after"},(0,i.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,i.kt)(r.ZP,{mdxType:"Playground"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Dialog, Button } from \'hds-react\';\n\n() => {\n  const confirmationDialogTarget = React.useRef(null); // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openConfirmationDialogButtonRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const close = () => setIsOpen(false);\n  const titleId = "confirmation-dialog-title";\n  const descriptionId = "confirmation-dialog-info";\n  return (\n    <>\n      <div ref={confirmationDialogTarget}/>\n      <Button ref={openConfirmationDialogButtonRef} onClick={() => setIsOpen(true)}>\n        Open Confirmation dialog\n      </Button>\n      <Dialog\n        id="confirmation-dialog"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n        isOpen={isOpen}\n        focusAfterCloseRef={openConfirmationDialogButtonRef}\n        targetElement={confirmationDialogTarget.current}\n      >\n        <Dialog.Header\n          id={titleId}\n          title="Are you sure you want to continue?"\n          iconLeft={<IconQuestionCircle aria-hidden="true" />}\n        />\n        <Dialog.Content>\n          <p id={descriptionId} className="text-body">\n            You have not filled all form fields. Do you still want to continue? You can later return to edit this form. Saved forms can be accessed in your personal profile.\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close}>\n            Continue\n          </Button>\n          <Button onClick={close} variant="secondary">\n            Cancel\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>\n  )\n}\n'))),(0,i.kt)("h3",{id:"danger-dialog",style:{position:"relative"}},"Danger dialog",(0,i.kt)("a",{parentName:"h3",href:"#danger-dialog","aria-label":"danger dialog permalink",className:"header-anchor after"},(0,i.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,i.kt)(r.ZP,{mdxType:"Playground"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Dialog, Button, IconAlertCircle } from \'hds-react\';\n\n() => {\n  const dangerDialogTargetRef = React.useRef(null); // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openDeleteDialogButtonRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const close = () => setIsOpen(false);\n  const titleId = "delete-dialog-title";\n  const descriptionId = "delete-dialog-info";\n  return (\n    <>\n      <div ref={dangerDialogTargetRef}/>\n      <Button ref={openDeleteDialogButtonRef} onClick={() => setIsOpen(true)}>\n        Open Delete dialog\n      </Button>\n      <Dialog\n        variant="danger"\n        id="delete-dialog"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n        isOpen={isOpen}\n        focusAfterCloseRef={openDeleteDialogButtonRef}\n        targetElement={dangerDialogTargetRef.current}\n      >\n        <Dialog.Header\n          id={titleId}\n          title="Are you sure you want to delete this blog post?"\n          iconLeft={<IconAlertCircle aria-hidden="true" />}\n        />\n        <Dialog.Content>\n          <p id={descriptionId} className="text-body">\n            The blog post will be deleted immediately. Deletion is permanent and it cannot be reverted.\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close} theme="black" variant="secondary">\n            Cancel\n          </Button>\n          <Button\n            variant="danger"\n            iconLeft={<IconTrash aria-hidden="true" />}\n            onClick={() => {\n              // Add confirm operations here\n              close();\n            }}\n          >\n            Delete the blog post\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>\n  )\n}\n'))),(0,i.kt)("h3",{id:"scrollable-dialog",style:{position:"relative"}},"Scrollable dialog",(0,i.kt)("a",{parentName:"h3",href:"#scrollable-dialog","aria-label":"scrollable dialog permalink",className:"header-anchor after"},(0,i.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,i.kt)(r.ZP,{mdxType:"Playground"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Dialog, Button, IconAlertCircle } from \'hds-react\';\n\n() => {\n  const termsDialogTargetRef = React.useRef(null); // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openTermsDialogButtonRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const close = () => setIsOpen(false);\n  const titleId = "terms-dialog-title";\n  const descriptionId = "terms-dialog-info";\n  return (\n    <>\n      <div ref={termsDialogTargetRef}/>\n      <Button ref={openTermsDialogButtonRef} onClick={() => setIsOpen(true)}>\n        Open Terms dialog\n      </Button>\n      <Dialog\n        id="terms-dialog"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n        isOpen={isOpen}\n        focusAfterCloseRef={openTermsDialogButtonRef}\n        targetElement={termsDialogTargetRef.current}\n        scrollable\n      >\n        <Dialog.Header\n          id={titleId}\n          title="Do you accept the terms of service?"\n          iconLeft={<IconAlertCircle aria-hidden="true" />}\n        />\n        <Dialog.Content>\n          <h3 id={descriptionId}>Terms of service</h3>\n          <p className="text-body">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem\n            aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni\n            dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor\n            sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore\n            magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in\n            ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas\n            nulla pariatur?\n          </p>\n          <p className="text-body">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem\n            aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni\n            dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor\n            sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore\n            magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in\n            ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas\n            nulla pariatur?\n          </p>\n          <p className="text-body">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem\n            aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni\n            dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor\n            sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore\n            magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in\n            ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas\n            nulla pariatur?\n          </p>\n          <p className="text-body">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem\n            aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni\n            dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor\n            sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore\n            magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in\n            ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas\n            nulla pariatur?\n          </p>\n          <p className="text-body">\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem\n            aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni\n            dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor\n            sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore\n            magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis\n            suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in\n            ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas\n            nulla pariatur?\n          </p>\n        </Dialog.Content>\n        <Dialog.ActionButtons>\n          <Button onClick={close}>\n            Accept terms\n          </Button>\n          <Button onClick={close} variant="secondary">\n            Cancel\n          </Button>\n        </Dialog.ActionButtons>\n      </Dialog>\n    </>\n  )\n}\n'))),(0,i.kt)("h4",{id:"dialog-with-custom-content",style:{position:"relative"}},"Dialog with custom content",(0,i.kt)("a",{parentName:"h4",href:"#dialog-with-custom-content","aria-label":"dialog with custom content permalink",className:"header-anchor after"},(0,i.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,i.kt)(r.ZP,{mdxType:"Playground"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Dialog, Button, TextInput, TextArea } from \'hds-react\';\n\n() => {\n  const customDialogTargetRef = React.useRef(null); // We need to render the dialog into a div inside the Playground component to ensure correct dialog styles in the HDS documentation. The dialog will be rendered into the document body by default.\n  const openCustomDialogButtonRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const close = () => setIsOpen(false);\n  const titleId = "custom-dialog-title";\n  const descriptionId = "custom-dialog-info";\n  return (\n    <>\n      <div ref={customDialogTargetRef}/>\n      <Button ref={openCustomDialogButtonRef} onClick={() => setIsOpen(true)}>\n        Open Dialog with custom content\n      </Button>\n      <Dialog\n        id="custom-dialog"\n        aria-labelledby={titleId}\n        aria-describedby={descriptionId}\n        isOpen={isOpen}\n        focusAfterCloseRef={openCustomDialogButtonRef}\n        targetElement={customDialogTargetRef.current}\n      >\n      <Dialog.Header\n        id={titleId}\n        title="Add new item"\n      />\n      <Dialog.Content>\n        <p id={descriptionId} className="text-body">\n          Add a new item by filling the information below. All fields are mandatory.\n        </p>\n        <TextInput\n          id="item-name"\n          label="Item name"\n          placeholder="E.g. Item 1"\n          helperText="Item\'s name must be unique."\n          required\n        />\n        <br />\n        <TextArea\n          id="item-description"\n          label="Item description"\n          placeholder="E.g. Item 1 is the first item of the system."\n          required\n        />\n      </Dialog.Content>\n      <Dialog.ActionButtons>\n        <Button\n          onClick={() => {\n            // Add operations here\n            close();\n          }}\n        >\n          Add item\n        </Button>\n        <Button onClick={close} variant="secondary">\n          Cancel\n        </Button>\n      </Dialog.ActionButtons>\n    </Dialog>\n    </>\n  )\n}\n'))),(0,i.kt)("h3",{id:"packages",style:{position:"relative"}},"Packages",(0,i.kt)("a",{parentName:"h3",href:"#packages","aria-label":"packages permalink",className:"header-anchor after"},(0,i.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Package"),(0,i.kt)("th",{parentName:"tr",align:null},"Included"),(0,i.kt)("th",{parentName:"tr",align:null},"Storybook link"),(0,i.kt)("th",{parentName:"tr",align:null},"Source link"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"HDS React")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("div",{style:{display:"flex",gap:"var(--spacing-3-xs)"}},(0,i.kt)(m,{mdxType:"IconCheckCircleFill"})," Yes ")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(o.L,{openInNewTab:!0,openInNewTabAriaLabel:"Opens in a new tab",href:"/storybook/react/?path=/story/components-dialog--default",mdxType:"Link"},"View in Storybook")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(l.Z,{openInNewTab:!0,openInNewTabAriaLabel:"Opens in a new tab",href:"https://github.com/City-of-Helsinki/helsinki-design-system/blob/master/packages/react/src/components/dialog/Dialog.tsx",mdxType:"ExternalLink"},"View source"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"HDS Core")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("div",{style:{display:"flex",gap:"var(--spacing-3-xs)"}},(0,i.kt)(p,{mdxType:"IconCrossCircle"})," No ")),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"-")))),(0,i.kt)("h3",{id:"properties",style:{position:"relative"}},"Properties",(0,i.kt)("a",{parentName:"h3",href:"#properties","aria-label":"properties permalink",className:"header-anchor after"},(0,i.kt)("span",{parentName:"a",className:"hds-anchor-icon hds-icon hds-icon--link hds-icon--size-xs","aria-hidden":"true",style:{verticalAlign:"middle"}}))),(0,i.kt)("p",null,"Note! You can find the full list of properties in the ",(0,i.kt)(o.L,{openInNewTab:!0,openInNewTabAriaLabel:"Opens in a new tab",href:"/storybook/react/?path=/story/components-dialog--default",mdxType:"Link"},"React Storybook.")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Values"),(0,i.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"isOpen")),(0,i.kt)("td",{parentName:"tr",align:null},"If set to true, the dialog is visible."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:null},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"focusAfterCloseRef")),(0,i.kt)("td",{parentName:"tr",align:null},"The element ref which will get focus after the dialog is closed."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"RefObject")),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"focusAfterCloseElement")),(0,i.kt)("td",{parentName:"tr",align:null},"The element which will get focus after the dialog is closed."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Object")),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"scrollable")),(0,i.kt)("td",{parentName:"tr",align:null},"If set to true, the dialog content is scrollable if needed. Use only for long text contents."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:null},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"variant")),(0,i.kt)("td",{parentName:"tr",align:null},"Defines the dialog variant."),(0,i.kt)("td",{parentName:"tr",align:null},"primary, danger"),(0,i.kt)("td",{parentName:"tr",align:null},"primary")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"close")),(0,i.kt)("td",{parentName:"tr",align:null},"A function called when a dialog close button is pressed. The button if shown if this property exists."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"function")),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"closeButtonLabelText")),(0,i.kt)("td",{parentName:"tr",align:null},"The aria-label for the close button. Required with ",(0,i.kt)("inlineCode",{parentName:"td"},"close")," property."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"-")))))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-components-dialog-code-mdx-265905b4179637d20285.js.map